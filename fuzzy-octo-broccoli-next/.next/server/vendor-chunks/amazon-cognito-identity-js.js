"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/amazon-cognito-identity-js";
exports.ids = ["vendor-chunks/amazon-cognito-identity-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AuthenticationDetails)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /** @class */ var AuthenticationDetails = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new AuthenticationDetails object\n   * @param {object=} data Creation options.\n   * @param {string} data.Username User being authenticated.\n   * @param {string} data.Password Plain-text password to authenticate with.\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\n   * @param {(AttributeArg[])?} data.AuthParamaters Authentication paramaters for custom auth.\n   */ function AuthenticationDetails(data) {\n        var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;\n        this.validationData = ValidationData || {};\n        this.authParameters = AuthParameters || {};\n        this.clientMetadata = ClientMetadata || {};\n        this.username = Username;\n        this.password = Password;\n    }\n    /**\n   * @returns {string} the record's username\n   */ var _proto = AuthenticationDetails.prototype;\n    _proto.getUsername = function getUsername() {\n        return this.username;\n    } /**\n   * @returns {string} the record's password\n   */ ;\n    _proto.getPassword = function getPassword() {\n        return this.password;\n    } /**\n   * @returns {Array} the record's validationData\n   */ ;\n    _proto.getValidationData = function getValidationData() {\n        return this.validationData;\n    } /**\n   * @returns {Array} the record's authParameters\n   */ ;\n    _proto.getAuthParameters = function getAuthParameters() {\n        return this.authParameters;\n    } /**\n   * @returns {ClientMetadata} the clientMetadata for a Lambda trigger\n   */ ;\n    _proto.getClientMetadata = function getClientMetadata() {\n        return this.clientMetadata;\n    };\n    return AuthenticationDetails;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQXV0aGVudGljYXRpb25EZXRhaWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDRCxXQUFXLEdBQ1gsSUFBSUEsd0JBQXdCLFdBQVcsR0FBRTtJQUN2Qzs7Ozs7OztHQU9DLEdBQ0QsU0FBU0Esc0JBQXNCQyxJQUFJO1FBQ2pDLElBQUlDLE9BQU9ELFFBQVEsQ0FBQyxHQUNsQkUsaUJBQWlCRCxLQUFLQyxjQUFjLEVBQ3BDQyxXQUFXRixLQUFLRSxRQUFRLEVBQ3hCQyxXQUFXSCxLQUFLRyxRQUFRLEVBQ3hCQyxpQkFBaUJKLEtBQUtJLGNBQWMsRUFDcENDLGlCQUFpQkwsS0FBS0ssY0FBYztRQUN0QyxJQUFJLENBQUNDLGNBQWMsR0FBR0wsa0JBQWtCLENBQUM7UUFDekMsSUFBSSxDQUFDTSxjQUFjLEdBQUdILGtCQUFrQixDQUFDO1FBQ3pDLElBQUksQ0FBQ0ksY0FBYyxHQUFHSCxrQkFBa0IsQ0FBQztRQUN6QyxJQUFJLENBQUNJLFFBQVEsR0FBR1A7UUFDaEIsSUFBSSxDQUFDUSxRQUFRLEdBQUdQO0lBQ2xCO0lBRUE7O0dBRUMsR0FDRCxJQUFJUSxTQUFTYixzQkFBc0JjLFNBQVM7SUFDNUNELE9BQU9FLFdBQVcsR0FBRyxTQUFTQTtRQUM1QixPQUFPLElBQUksQ0FBQ0osUUFBUTtJQUN0QixFQUVBOztHQUVDO0lBQ0RFLE9BQU9HLFdBQVcsR0FBRyxTQUFTQTtRQUM1QixPQUFPLElBQUksQ0FBQ0osUUFBUTtJQUN0QixFQUVBOztHQUVDO0lBQ0RDLE9BQU9JLGlCQUFpQixHQUFHLFNBQVNBO1FBQ2xDLE9BQU8sSUFBSSxDQUFDVCxjQUFjO0lBQzVCLEVBRUE7O0dBRUM7SUFDREssT0FBT0ssaUJBQWlCLEdBQUcsU0FBU0E7UUFDbEMsT0FBTyxJQUFJLENBQUNULGNBQWM7SUFDNUIsRUFFQTs7R0FFQztJQUNESSxPQUFPTSxpQkFBaUIsR0FBRyxTQUFTQTtRQUNsQyxPQUFPLElBQUksQ0FBQ1QsY0FBYztJQUM1QjtJQUNBLE9BQU9WO0FBQ1Q7QUFDNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdXp6eS1vY3RvLWJyb2Njb2xpLW5leHQvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQXV0aGVudGljYXRpb25EZXRhaWxzLmpzP2M5NTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKiBAY2xhc3MgKi9cbnZhciBBdXRoZW50aWNhdGlvbkRldGFpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBBdXRoZW50aWNhdGlvbkRldGFpbHMgb2JqZWN0XG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gZGF0YSBDcmVhdGlvbiBvcHRpb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5Vc2VybmFtZSBVc2VyIGJlaW5nIGF1dGhlbnRpY2F0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLlBhc3N3b3JkIFBsYWluLXRleHQgcGFzc3dvcmQgdG8gYXV0aGVudGljYXRlIHdpdGguXG4gICAqIEBwYXJhbSB7KEF0dHJpYnV0ZUFyZ1tdKT99IGRhdGEuVmFsaWRhdGlvbkRhdGEgQXBwbGljYXRpb24gZXh0cmEgbWV0YWRhdGEuXG4gICAqIEBwYXJhbSB7KEF0dHJpYnV0ZUFyZ1tdKT99IGRhdGEuQXV0aFBhcmFtYXRlcnMgQXV0aGVudGljYXRpb24gcGFyYW1hdGVycyBmb3IgY3VzdG9tIGF1dGguXG4gICAqL1xuICBmdW5jdGlvbiBBdXRoZW50aWNhdGlvbkRldGFpbHMoZGF0YSkge1xuICAgIHZhciBfcmVmID0gZGF0YSB8fCB7fSxcbiAgICAgIFZhbGlkYXRpb25EYXRhID0gX3JlZi5WYWxpZGF0aW9uRGF0YSxcbiAgICAgIFVzZXJuYW1lID0gX3JlZi5Vc2VybmFtZSxcbiAgICAgIFBhc3N3b3JkID0gX3JlZi5QYXNzd29yZCxcbiAgICAgIEF1dGhQYXJhbWV0ZXJzID0gX3JlZi5BdXRoUGFyYW1ldGVycyxcbiAgICAgIENsaWVudE1ldGFkYXRhID0gX3JlZi5DbGllbnRNZXRhZGF0YTtcbiAgICB0aGlzLnZhbGlkYXRpb25EYXRhID0gVmFsaWRhdGlvbkRhdGEgfHwge307XG4gICAgdGhpcy5hdXRoUGFyYW1ldGVycyA9IEF1dGhQYXJhbWV0ZXJzIHx8IHt9O1xuICAgIHRoaXMuY2xpZW50TWV0YWRhdGEgPSBDbGllbnRNZXRhZGF0YSB8fCB7fTtcbiAgICB0aGlzLnVzZXJuYW1lID0gVXNlcm5hbWU7XG4gICAgdGhpcy5wYXNzd29yZCA9IFBhc3N3b3JkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSByZWNvcmQncyB1c2VybmFtZVxuICAgKi9cbiAgdmFyIF9wcm90byA9IEF1dGhlbnRpY2F0aW9uRGV0YWlscy5wcm90b3R5cGU7XG4gIF9wcm90by5nZXRVc2VybmFtZSA9IGZ1bmN0aW9uIGdldFVzZXJuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSByZWNvcmQncyBwYXNzd29yZFxuICAgKi87XG4gIF9wcm90by5nZXRQYXNzd29yZCA9IGZ1bmN0aW9uIGdldFBhc3N3b3JkKCkge1xuICAgIHJldHVybiB0aGlzLnBhc3N3b3JkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtBcnJheX0gdGhlIHJlY29yZCdzIHZhbGlkYXRpb25EYXRhXG4gICAqLztcbiAgX3Byb3RvLmdldFZhbGlkYXRpb25EYXRhID0gZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbkRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGlvbkRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5fSB0aGUgcmVjb3JkJ3MgYXV0aFBhcmFtZXRlcnNcbiAgICovO1xuICBfcHJvdG8uZ2V0QXV0aFBhcmFtZXRlcnMgPSBmdW5jdGlvbiBnZXRBdXRoUGFyYW1ldGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRoUGFyYW1ldGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Q2xpZW50TWV0YWRhdGF9IHRoZSBjbGllbnRNZXRhZGF0YSBmb3IgYSBMYW1iZGEgdHJpZ2dlclxuICAgKi87XG4gIF9wcm90by5nZXRDbGllbnRNZXRhZGF0YSA9IGZ1bmN0aW9uIGdldENsaWVudE1ldGFkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudE1ldGFkYXRhO1xuICB9O1xuICByZXR1cm4gQXV0aGVudGljYXRpb25EZXRhaWxzO1xufSgpO1xuZXhwb3J0IHsgQXV0aGVudGljYXRpb25EZXRhaWxzIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiQXV0aGVudGljYXRpb25EZXRhaWxzIiwiZGF0YSIsIl9yZWYiLCJWYWxpZGF0aW9uRGF0YSIsIlVzZXJuYW1lIiwiUGFzc3dvcmQiLCJBdXRoUGFyYW1ldGVycyIsIkNsaWVudE1ldGFkYXRhIiwidmFsaWRhdGlvbkRhdGEiLCJhdXRoUGFyYW1ldGVycyIsImNsaWVudE1ldGFkYXRhIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIl9wcm90byIsInByb3RvdHlwZSIsImdldFVzZXJuYW1lIiwiZ2V0UGFzc3dvcmQiLCJnZXRWYWxpZGF0aW9uRGF0YSIsImdldEF1dGhQYXJhbWV0ZXJzIiwiZ2V0Q2xpZW50TWV0YWRhdGEiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AuthenticationHelper)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_WordArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/WordArray */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js\");\n/* harmony import */ var _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-crypto/sha256-js */ \"(ssr)/./node_modules/@aws-crypto/sha256-js/build/index.js\");\n/* harmony import */ var _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _BigInteger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BigInteger */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/BigInteger.js\");\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n\n\n/**\n * Returns a Buffer with a sequence of random nBytes\n *\n * @param {number} nBytes\n * @returns {Buffer} fixed-length sequence of random bytes\n */ function randomBytes(nBytes) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(new _utils_WordArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"]().random(nBytes).toString(), \"hex\");\n}\n\n/**\n * Tests if a hex string has it most significant bit set (case-insensitive regex)\n */ var HEX_MSB_REGEX = /^[89a-f]/i;\nvar initN = \"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1\" + \"29024E088A67CC74020BBEA63B139B22514A08798E3404DD\" + \"EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245\" + \"E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED\" + \"EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D\" + \"C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F\" + \"83655D23DCA3AD961C62F356208552BB9ED529077096966D\" + \"670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B\" + \"E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9\" + \"DE2BCBF6955817183995497CEA956AE515D2261898FA0510\" + \"15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64\" + \"ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7\" + \"ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B\" + \"F12FFA06D98A0864D87602733EC86A64521F2B18177B200C\" + \"BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31\" + \"43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF\";\nvar newPasswordRequiredChallengeUserAttributePrefix = \"userAttributes.\";\n/** @class */ var AuthenticationHelper = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */ function AuthenticationHelper(PoolName) {\n        this.N = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](initN, 16);\n        this.g = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](\"2\", 16);\n        this.k = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.hexHash(\"\" + this.padHex(this.N) + this.padHex(this.g)), 16);\n        this.smallAValue = this.generateRandomSmallA();\n        this.getLargeAValue(function() {});\n        this.infoBits = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(\"Caldera Derived Key\", \"utf8\");\n        this.poolName = PoolName;\n    }\n    /**\n   * @returns {BigInteger} small A, a random number\n   */ var _proto = AuthenticationHelper.prototype;\n    _proto.getSmallAValue = function getSmallAValue() {\n        return this.smallAValue;\n    } /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */ ;\n    _proto.getLargeAValue = function getLargeAValue(callback) {\n        var _this = this;\n        if (this.largeAValue) {\n            callback(null, this.largeAValue);\n        } else {\n            this.calculateA(this.smallAValue, function(err, largeAValue) {\n                if (err) {\n                    callback(err, null);\n                }\n                _this.largeAValue = largeAValue;\n                callback(null, _this.largeAValue);\n            });\n        }\n    } /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */ ;\n    _proto.generateRandomSmallA = function generateRandomSmallA() {\n        // This will be interpreted as a postive 128-bit integer\n        var hexRandom = randomBytes(128).toString(\"hex\");\n        var randomBigInt = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](hexRandom, 16);\n        // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)\n        return randomBigInt;\n    } /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */ ;\n    _proto.generateRandomString = function generateRandomString() {\n        return randomBytes(40).toString(\"base64\");\n    } /**\n   * @returns {string} Generated random value included in password hash.\n   */ ;\n    _proto.getRandomPassword = function getRandomPassword() {\n        return this.randomPassword;\n    } /**\n   * @returns {string} Generated random value included in devices hash.\n   */ ;\n    _proto.getSaltDevices = function getSaltDevices() {\n        return this.SaltToHashDevices;\n    } /**\n   * @returns {string} Value used to verify devices.\n   */ ;\n    _proto.getVerifierDevices = function getVerifierDevices() {\n        return this.verifierDevices;\n    } /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */ ;\n    _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n        var _this2 = this;\n        this.randomPassword = this.generateRandomString();\n        var combinedString = \"\" + deviceGroupKey + username + \":\" + this.randomPassword;\n        var hashedString = this.hash(combinedString);\n        var hexRandom = randomBytes(16).toString(\"hex\");\n        // The random hex will be unambiguously represented as a postive integer\n        this.SaltToHashDevices = this.padHex(new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](hexRandom, 16));\n        this.g.modPow(new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {\n            if (err) {\n                callback(err, null);\n            }\n            _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n            callback(null, null);\n        });\n    } /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */ ;\n    _proto.calculateA = function calculateA(a, callback) {\n        var _this3 = this;\n        this.g.modPow(a, this.N, function(err, A) {\n            if (err) {\n                callback(err, null);\n            }\n            if (A.mod(_this3.N).equals(_BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO)) {\n                callback(new Error(\"Illegal paramater. A mod N cannot be 0.\"), null);\n            }\n            callback(null, A);\n        });\n    } /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */ ;\n    _proto.calculateU = function calculateU(A, B) {\n        this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n        var finalU = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.UHexHash, 16);\n        return finalU;\n    } /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */ ;\n    _proto.hash = function hash(buf) {\n        var awsCryptoHash = new _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2__.Sha256();\n        awsCryptoHash.update(buf);\n        var resultFromAWSCrypto = awsCryptoHash.digestSync();\n        var hashHex = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(resultFromAWSCrypto).toString(\"hex\");\n        return new Array(64 - hashHex.length).join(\"0\") + hashHex;\n    } /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */ ;\n    _proto.hexHash = function hexHash(hexStr) {\n        return this.hash(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hexStr, \"hex\"));\n    } /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */ ;\n    _proto.computehkdf = function computehkdf(ikm, salt) {\n        var infoBitsBuffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([\n            this.infoBits,\n            buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(String.fromCharCode(1), \"utf8\")\n        ]);\n        var awsCryptoHash = new _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2__.Sha256(salt);\n        awsCryptoHash.update(ikm);\n        var resultFromAWSCryptoPrk = awsCryptoHash.digestSync();\n        var awsCryptoHashHmac = new _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_2__.Sha256(resultFromAWSCryptoPrk);\n        awsCryptoHashHmac.update(infoBitsBuffer);\n        var resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();\n        var hashHexFromAWSCrypto = resultFromAWSCryptoHmac;\n        var currentHex = hashHexFromAWSCrypto.slice(0, 16);\n        return currentHex;\n    } /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */ ;\n    _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n        var _this4 = this;\n        if (serverBValue.mod(this.N).equals(_BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO)) {\n            throw new Error(\"B cannot be zero.\");\n        }\n        this.UValue = this.calculateU(this.largeAValue, serverBValue);\n        if (this.UValue.equals(_BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO)) {\n            throw new Error(\"U cannot be zero.\");\n        }\n        var usernamePassword = \"\" + this.poolName + username + \":\" + password;\n        var usernamePasswordHash = this.hash(usernamePassword);\n        var xValue = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n        this.calculateS(xValue, serverBValue, function(err, sValue) {\n            if (err) {\n                callback(err, null);\n            }\n            var hkdf = _this4.computehkdf(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this4.padHex(sValue), \"hex\"), buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this4.padHex(_this4.UValue), \"hex\"));\n            callback(null, hkdf);\n        });\n    } /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.calculateS = function calculateS(xValue, serverBValue, callback) {\n        var _this5 = this;\n        this.g.modPow(xValue, this.N, function(err, gModPowXN) {\n            if (err) {\n                callback(err, null);\n            }\n            var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n            intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {\n                if (err2) {\n                    callback(err2, null);\n                }\n                callback(null, result.mod(_this5.N));\n            });\n        });\n    } /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */ ;\n    _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n        return newPasswordRequiredChallengeUserAttributePrefix;\n    } /**\n   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.\n   *\n   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a\n   * byte array containing the two's-complement representation of a BigInteger. The array contains\n   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.\n   *\n   * Examples showing how ambiguity is avoided by left padding with:\n   * \t\"00\" (for positive values where the most-significant-bit is set)\n   *  \"FF\" (for negative values where the most-significant-bit is set)\n   *\n   * padHex(bigInteger.fromInt(-236))  === \"FF14\"\n   * padHex(bigInteger.fromInt(20))    === \"14\"\n   *\n   * padHex(bigInteger.fromInt(-200))  === \"FF38\"\n   * padHex(bigInteger.fromInt(56))    === \"38\"\n   *\n   * padHex(bigInteger.fromInt(-20))   === \"EC\"\n   * padHex(bigInteger.fromInt(236))   === \"00EC\"\n   *\n   * padHex(bigInteger.fromInt(-56))   === \"C8\"\n   * padHex(bigInteger.fromInt(200))   === \"00C8\"\n   *\n   * @param {BigInteger} bigInt Number to encode.\n   * @returns {String} even-length hex string of the two's complement encoding.\n   */ ;\n    _proto.padHex = function padHex(bigInt) {\n        if (!(bigInt instanceof _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])) {\n            throw new Error(\"Not a BigInteger\");\n        }\n        var isNegative = bigInt.compareTo(_BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ZERO) < 0;\n        /* Get a hex string for abs(bigInt) */ var hexStr = bigInt.abs().toString(16);\n        /* Pad hex to even length if needed */ hexStr = hexStr.length % 2 !== 0 ? \"0\" + hexStr : hexStr;\n        /* Prepend \"00\" if the most significant bit is set */ hexStr = HEX_MSB_REGEX.test(hexStr) ? \"00\" + hexStr : hexStr;\n        if (isNegative) {\n            /* Flip the bits of the representation */ var invertedNibbles = hexStr.split(\"\").map(function(x) {\n                var invertedNibble = ~parseInt(x, 16) & 0xf;\n                return \"0123456789ABCDEF\".charAt(invertedNibble);\n            }).join(\"\");\n            /* After flipping the bits, add one to get the 2's complement representation */ var flippedBitsBI = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](invertedNibbles, 16).add(_BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ONE);\n            hexStr = flippedBitsBI.toString(16);\n            /*\n      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128\n      \t\tAny sequence of '1' bits on the left can always be substituted with a single '1' bit\n      without changing the represented value.\n      \t\tThis only happens in the case when the input is 80...00\n      */ if (hexStr.toUpperCase().startsWith(\"FF8\")) {\n                hexStr = hexStr.substring(2);\n            }\n        }\n        return hexStr;\n    };\n    return AuthenticationHelper;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/BigInteger.js":
/*!******************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/BigInteger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BigInteger);\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */ // (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null) this.fromString(a, b);\n}\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null);\n}\n// Bits per digit\nvar dbits;\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe;\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while(--n >= 0){\n        var v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff, xh = x >> 15;\n    while(--n >= 0){\n        var l = this[i] & 0x7fff;\n        var h = this[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff, xh = x >> 14;\n    while(--n >= 0){\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\nvar inBrowser = typeof navigator !== \"undefined\";\nif (inBrowser && j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n} else if (inBrowser && j_lm && navigator.appName != \"Netscape\") {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n} else {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n}\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n}\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for(var i = this.t - 1; i >= 0; --i)r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + this.DV;\n    else this.t = 0;\n}\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else throw new Error(\"Only radix 2, 4, 8, 16, 32 are supported\");\n    this.t = 0;\n    this.s = 0;\n    var i = s.length, mi = false, sh = 0;\n    while(--i >= 0){\n        var x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\") mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh == 0) this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n            this[this.t++] = x >> this.DB - sh;\n        } else this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB) sh -= this.DB;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while(this.t > 0 && this[this.t - 1] == c)--this.t;\n}\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else throw new Error(\"Only radix 2, 4, 8, 16, 32 are supported\");\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n    var p = this.DB - i * this.DB % k;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while(i >= 0){\n            if (p < k) {\n                d = (this[i] & (1 << p) - 1) << k - p;\n                d |= this[--i] >> (p += this.DB - k);\n            } else {\n                d = this[i] >> (p -= k) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0) m = true;\n            if (m) r += int2char(d);\n        }\n    }\n    return m ? r : \"0\";\n}\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n// (public) |this|\nfunction bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n}\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return this.s < 0 ? -r : r;\n    while(--i >= 0)if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n}\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    var i;\n    for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];\n    for(i = n - 1; i >= 0; --i)r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for(var i = n; i < this.t; ++i)r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;\n    for(i = this.t - 1; i >= 0; --i){\n        r[i + ds + 1] = this[i] >> cbs | c;\n        c = (this[i] & bm) << bs;\n    }\n    for(i = ds - 1; i >= 0; --i)r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for(var i = ds + 1; i < this.t; ++i){\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while(i < m){\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while(i < this.t){\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    } else {\n        c += this.s;\n        while(i < a.t){\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    var x = this.abs(), y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while(--i >= 0)r[i] = 0;\n    for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while(--i >= 0)r[i] = 0;\n    for(i = 0; i < x.t - 1; ++i){\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null) q.fromInt(0);\n        if (r != null) this.copyTo(r);\n        return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]);\n    // normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    } else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    var i = r.t, j = i - ys, t = q == null ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\n    // \"negative\" y so we can replace sub with am later\n    while(y.t < ys)y[y.t++] = 0;\n    while(--j >= 0){\n        // Estimate quotient digit\n        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n            // Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while(r[i] < --qd)r.subTo(t, r);\n        }\n    }\n    if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r);\n    // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n}\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3;\n    // y == 1/x mod 2^2\n    y = y * (2 - (x & 0xf) * y) & 0xf;\n    // y == 1/x mod 2^4\n    y = y * (2 - (x & 0xff) * y) & 0xff;\n    // y == 1/x mod 2^8\n    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;\n    // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = y * (2 - x * y % this.DV) % this.DV;\n    // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return y > 0 ? this.DV - y : -y;\n}\nfunction bnEquals(a) {\n    return this.compareTo(a) == 0;\n}\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while(i < m){\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while(i < this.t){\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    } else {\n        c += this.s;\n        while(i < a.t){\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n// (public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n// (public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n// (public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n// (public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << m.DB - 15) - 1;\n    this.mt2 = 2 * m.t;\n}\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n}\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while(x.t <= this.mt2)// pad x so am has enough room later\n    x[x.t++] = 0;\n    for(var i = 0; i < this.m.t; ++i){\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV){\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n    var i = e.bitLength(), k, r = nbv(1), z = new Montgomery(m);\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    // precomputation\n    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while(n <= km){\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n    i = nbits(e[j]) - 1;\n    while(j >= 0){\n        if (i >= k1) w = e[j] >> i - k1 & km;\n        else {\n            w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n            if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n        }\n        n = k;\n        while((w & 1) == 0){\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\n            // ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        } else {\n            while(n > 1){\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0) z.sqrTo(r, r2);\n            else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n        while(j >= 0 && (e[j] & 1 << i) == 0){\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    var result = z.revert(r);\n    callback(null, result);\n    return result;\n}\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/BigInteger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/Client.js":
/*!**************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/Client.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-unfetch */ \"(ssr)/./node_modules/isomorphic-unfetch/index.js\");\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _UserAgent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UserAgent */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/UserAgent.js\");\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n        if (Class === null || !_isNativeFunction(Class)) return Class;\n        if (typeof Class !== \"function\") {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return _setPrototypeOf(Wrapper, Class);\n    };\n    return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n        _construct = Reflect.construct.bind();\n    } else {\n        _construct = function _construct(Parent, args, Class) {\n            var a = [\n                null\n            ];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n            if (Class) _setPrototypeOf(instance, Class.prototype);\n            return instance;\n        };\n    }\n    return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\n\n\nvar CognitoError = /*#__PURE__*/ function(_Error) {\n    _inheritsLoose(CognitoError, _Error);\n    function CognitoError(message, code, name, statusCode) {\n        var _this;\n        _this = _Error.call(this, message) || this;\n        _this.code = code;\n        _this.name = name;\n        _this.statusCode = statusCode;\n        return _this;\n    }\n    return CognitoError;\n}(/*#__PURE__*/ _wrapNativeSuper(Error));\n/** @class */ var Client = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new AWS Cognito Identity Provider client object\n   * @param {string} region AWS region\n   * @param {string} endpoint endpoint\n   * @param {object} fetchOptions options for fetch API (only credentials is supported)\n   */ function Client(region, endpoint, fetchOptions) {\n        this.endpoint = endpoint || \"https://cognito-idp.\" + region + \".amazonaws.com/\";\n        var _ref = fetchOptions || {}, credentials = _ref.credentials;\n        this.fetchOptions = credentials ? {\n            credentials: credentials\n        } : {};\n    }\n    /**\n   * Makes an unauthenticated request on AWS Cognito Identity Provider API\n   * using fetch\n   * @param {string} operation API operation\n   * @param {object} params Input parameters\n   * @returns Promise<object>\n   */ var _proto = Client.prototype;\n    _proto.promisifyRequest = function promisifyRequest(operation, params) {\n        var _this2 = this;\n        return new Promise(function(resolve, reject) {\n            _this2.request(operation, params, function(err, data) {\n                if (err) {\n                    reject(new CognitoError(err.message, err.code, err.name, err.statusCode));\n                } else {\n                    resolve(data);\n                }\n            });\n        });\n    };\n    _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {\n        var _this3 = this;\n        var MAX_DELAY_IN_MILLIS = 5 * 1000;\n        jitteredExponentialRetry(function(p) {\n            return new Promise(function(res, rej) {\n                _this3.request(operation, p, function(error, result) {\n                    if (error) {\n                        rej(error);\n                    } else {\n                        res(result);\n                    }\n                });\n            });\n        }, [\n            params\n        ], MAX_DELAY_IN_MILLIS).then(function(result) {\n            return callback(null, result);\n        })[\"catch\"](function(error) {\n            return callback(error);\n        });\n    } /**\n   * Makes an unauthenticated request on AWS Cognito Identity Provider API\n   * using fetch\n   * @param {string} operation API operation\n   * @param {object} params Input parameters\n   * @param {function} callback Callback called when a response is returned\n   * @returns {void}\n   */ ;\n    _proto.request = function request(operation, params, callback) {\n        var headers = {\n            \"Content-Type\": \"application/x-amz-json-1.1\",\n            \"X-Amz-Target\": \"AWSCognitoIdentityProviderService.\" + operation,\n            \"X-Amz-User-Agent\": (0,_UserAgent__WEBPACK_IMPORTED_MODULE_1__.getAmplifyUserAgent)(),\n            \"Cache-Control\": \"no-store\"\n        };\n        var options = Object.assign({}, this.fetchOptions, {\n            headers: headers,\n            method: \"POST\",\n            mode: \"cors\",\n            body: JSON.stringify(params)\n        });\n        var response;\n        var responseJsonData;\n        fetch(this.endpoint, options).then(function(resp) {\n            response = resp;\n            return resp;\n        }, function(err) {\n            // If error happens here, the request failed\n            // if it is TypeError throw network error\n            if (err instanceof TypeError) {\n                throw new Error(\"Network error\");\n            }\n            throw err;\n        }).then(function(resp) {\n            return resp.json()[\"catch\"](function() {\n                return {};\n            });\n        }).then(function(data) {\n            // return parsed body stream\n            if (response.ok) return callback(null, data);\n            responseJsonData = data;\n            // Taken from aws-sdk-js/lib/protocol/json.js\n            // eslint-disable-next-line no-underscore-dangle\n            var code = (data.__type || data.code).split(\"#\").pop();\n            var error = new Error(data.message || data.Message || null);\n            error.name = code;\n            error.code = code;\n            return callback(error);\n        })[\"catch\"](function(err) {\n            // first check if we have a service error\n            if (response && response.headers && response.headers.get(\"x-amzn-errortype\")) {\n                try {\n                    var code = response.headers.get(\"x-amzn-errortype\").split(\":\")[0];\n                    var error = new Error(response.status ? response.status.toString() : null);\n                    error.code = code;\n                    error.name = code;\n                    error.statusCode = response.status;\n                    return callback(error);\n                } catch (ex) {\n                    return callback(err);\n                }\n            // otherwise check if error is Network error\n            } else if (err instanceof Error && err.message === \"Network error\") {\n                err.code = \"NetworkError\";\n            }\n            return callback(err);\n        });\n    };\n    return Client;\n}();\n\nvar logger = {\n    debug: function debug() {\n    // Intentionally blank. This package doesn't have logging\n    }\n};\n/**\n * For now, all errors are retryable.\n */ var NonRetryableError = /*#__PURE__*/ function(_Error2) {\n    _inheritsLoose(NonRetryableError, _Error2);\n    function NonRetryableError(message) {\n        var _this4;\n        _this4 = _Error2.call(this, message) || this;\n        _this4.nonRetryable = true;\n        return _this4;\n    }\n    return NonRetryableError;\n}(/*#__PURE__*/ _wrapNativeSuper(Error));\nvar isNonRetryableError = function isNonRetryableError(obj) {\n    var key = \"nonRetryable\";\n    return obj && obj[key];\n};\nfunction retry(functionToRetry, args, delayFn, attempt) {\n    if (attempt === void 0) {\n        attempt = 1;\n    }\n    if (typeof functionToRetry !== \"function\") {\n        throw Error(\"functionToRetry must be a function\");\n    }\n    logger.debug(functionToRetry.name + \" attempt #\" + attempt + \" with args: \" + JSON.stringify(args));\n    return functionToRetry.apply(void 0, args)[\"catch\"](function(err) {\n        logger.debug(\"error on \" + functionToRetry.name, err);\n        if (isNonRetryableError(err)) {\n            logger.debug(functionToRetry.name + \" non retryable error\", err);\n            throw err;\n        }\n        var retryIn = delayFn(attempt, args, err);\n        logger.debug(functionToRetry.name + \" retrying in \" + retryIn + \" ms\");\n        if (retryIn !== false) {\n            return new Promise(function(res) {\n                return setTimeout(res, retryIn);\n            }).then(function() {\n                return retry(functionToRetry, args, delayFn, attempt + 1);\n            });\n        } else {\n            throw err;\n        }\n    });\n}\nfunction jitteredBackoff(maxDelayMs) {\n    var BASE_TIME_MS = 100;\n    var JITTER_FACTOR = 100;\n    return function(attempt) {\n        var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();\n        return delay > maxDelayMs ? false : delay;\n    };\n}\nvar MAX_DELAY_MS = 5 * 60 * 1000;\nfunction jitteredExponentialRetry(functionToRetry, args, maxDelayMs) {\n    if (maxDelayMs === void 0) {\n        maxDelayMs = MAX_DELAY_MS;\n    }\n    return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/Client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoAccessToken)\n/* harmony export */ });\n/* harmony import */ var _CognitoJwtToken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitoJwtToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js\");\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n/** @class */ var CognitoAccessToken = /*#__PURE__*/ function(_CognitoJwtToken) {\n    _inheritsLoose(CognitoAccessToken, _CognitoJwtToken);\n    /**\n   * Constructs a new CognitoAccessToken object\n   * @param {string=} AccessToken The JWT access token.\n   */ function CognitoAccessToken(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;\n        return _CognitoJwtToken.call(this, AccessToken || \"\") || this;\n    }\n    return CognitoAccessToken;\n}(_CognitoJwtToken__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b0FjY2Vzc1Rva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsU0FBU0EsZUFBZUMsUUFBUSxFQUFFQyxVQUFVO0lBQUlELFNBQVNFLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDSCxXQUFXQyxTQUFTO0lBQUdGLFNBQVNFLFNBQVMsQ0FBQ0csV0FBVyxHQUFHTDtJQUFVTSxnQkFBZ0JOLFVBQVVDO0FBQWE7QUFDNUwsU0FBU0ssZ0JBQWdCQyxDQUFDLEVBQUVDLENBQUM7SUFBSUYsa0JBQWtCSCxPQUFPTSxjQUFjLEdBQUdOLE9BQU9NLGNBQWMsQ0FBQ0MsSUFBSSxLQUFLLFNBQVNKLGdCQUFnQkMsQ0FBQyxFQUFFQyxDQUFDO1FBQUlELEVBQUVJLFNBQVMsR0FBR0g7UUFBRyxPQUFPRDtJQUFHO0lBQUcsT0FBT0QsZ0JBQWdCQyxHQUFHQztBQUFJO0FBQ3ZNOzs7Q0FHQyxHQUUrQztBQUVoRCxXQUFXLEdBQ1gsSUFBSUsscUJBQXFCLFdBQVcsR0FBRSxTQUFVQyxnQkFBZ0I7SUFDOURmLGVBQWVjLG9CQUFvQkM7SUFDbkM7OztHQUdDLEdBQ0QsU0FBU0QsbUJBQW1CRSxLQUFLO1FBQy9CLElBQUlDLE9BQU9ELFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSUEsT0FDakNFLGNBQWNELEtBQUtDLFdBQVc7UUFDaEMsT0FBT0gsaUJBQWlCSSxJQUFJLENBQUMsSUFBSSxFQUFFRCxlQUFlLE9BQU8sSUFBSTtJQUMvRDtJQUNBLE9BQU9KO0FBQ1QsRUFBRUQsd0RBQWVBO0FBQ3dCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0NvZ25pdG9BY2Nlc3NUb2tlbi5qcz9jMDcxIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cbi8qIVxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCBDb2duaXRvSnd0VG9rZW4gZnJvbSAnLi9Db2duaXRvSnd0VG9rZW4nO1xuXG4vKiogQGNsYXNzICovXG52YXIgQ29nbml0b0FjY2Vzc1Rva2VuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29nbml0b0p3dFRva2VuKSB7XG4gIF9pbmhlcml0c0xvb3NlKENvZ25pdG9BY2Nlc3NUb2tlbiwgX0NvZ25pdG9Kd3RUb2tlbik7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENvZ25pdG9BY2Nlc3NUb2tlbiBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBBY2Nlc3NUb2tlbiBUaGUgSldUIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIGZ1bmN0aW9uIENvZ25pdG9BY2Nlc3NUb2tlbihfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBBY2Nlc3NUb2tlbiA9IF9yZWYuQWNjZXNzVG9rZW47XG4gICAgcmV0dXJuIF9Db2duaXRvSnd0VG9rZW4uY2FsbCh0aGlzLCBBY2Nlc3NUb2tlbiB8fCAnJykgfHwgdGhpcztcbiAgfVxuICByZXR1cm4gQ29nbml0b0FjY2Vzc1Rva2VuO1xufShDb2duaXRvSnd0VG9rZW4pO1xuZXhwb3J0IHsgQ29nbml0b0FjY2Vzc1Rva2VuIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJiaW5kIiwiX19wcm90b19fIiwiQ29nbml0b0p3dFRva2VuIiwiQ29nbml0b0FjY2Vzc1Rva2VuIiwiX0NvZ25pdG9Kd3RUb2tlbiIsIl90ZW1wIiwiX3JlZiIsIkFjY2Vzc1Rva2VuIiwiY2FsbCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoIdToken)\n/* harmony export */ });\n/* harmony import */ var _CognitoJwtToken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CognitoJwtToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js\");\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n/** @class */ var CognitoIdToken = /*#__PURE__*/ function(_CognitoJwtToken) {\n    _inheritsLoose(CognitoIdToken, _CognitoJwtToken);\n    /**\n   * Constructs a new CognitoIdToken object\n   * @param {string=} IdToken The JWT Id token\n   */ function CognitoIdToken(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;\n        return _CognitoJwtToken.call(this, IdToken || \"\") || this;\n    }\n    return CognitoIdToken;\n}(_CognitoJwtToken__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b0lkVG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxlQUFlQyxRQUFRLEVBQUVDLFVBQVU7SUFBSUQsU0FBU0UsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNILFdBQVdDLFNBQVM7SUFBR0YsU0FBU0UsU0FBUyxDQUFDRyxXQUFXLEdBQUdMO0lBQVVNLGdCQUFnQk4sVUFBVUM7QUFBYTtBQUM1TCxTQUFTSyxnQkFBZ0JDLENBQUMsRUFBRUMsQ0FBQztJQUFJRixrQkFBa0JILE9BQU9NLGNBQWMsR0FBR04sT0FBT00sY0FBYyxDQUFDQyxJQUFJLEtBQUssU0FBU0osZ0JBQWdCQyxDQUFDLEVBQUVDLENBQUM7UUFBSUQsRUFBRUksU0FBUyxHQUFHSDtRQUFHLE9BQU9EO0lBQUc7SUFBRyxPQUFPRCxnQkFBZ0JDLEdBQUdDO0FBQUk7QUFDdk07OztDQUdDLEdBRStDO0FBRWhELFdBQVcsR0FDWCxJQUFJSyxpQkFBaUIsV0FBVyxHQUFFLFNBQVVDLGdCQUFnQjtJQUMxRGYsZUFBZWMsZ0JBQWdCQztJQUMvQjs7O0dBR0MsR0FDRCxTQUFTRCxlQUFlRSxLQUFLO1FBQzNCLElBQUlDLE9BQU9ELFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSUEsT0FDakNFLFVBQVVELEtBQUtDLE9BQU87UUFDeEIsT0FBT0gsaUJBQWlCSSxJQUFJLENBQUMsSUFBSSxFQUFFRCxXQUFXLE9BQU8sSUFBSTtJQUMzRDtJQUNBLE9BQU9KO0FBQ1QsRUFBRUQsd0RBQWVBO0FBQ29CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0NvZ25pdG9JZFRva2VuLmpzPzMxMjkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IENvZ25pdG9Kd3RUb2tlbiBmcm9tICcuL0NvZ25pdG9Kd3RUb2tlbic7XG5cbi8qKiBAY2xhc3MgKi9cbnZhciBDb2duaXRvSWRUb2tlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvZ25pdG9Kd3RUb2tlbikge1xuICBfaW5oZXJpdHNMb29zZShDb2duaXRvSWRUb2tlbiwgX0NvZ25pdG9Kd3RUb2tlbik7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENvZ25pdG9JZFRva2VuIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IElkVG9rZW4gVGhlIEpXVCBJZCB0b2tlblxuICAgKi9cbiAgZnVuY3Rpb24gQ29nbml0b0lkVG9rZW4oX3RlbXApIHtcbiAgICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgSWRUb2tlbiA9IF9yZWYuSWRUb2tlbjtcbiAgICByZXR1cm4gX0NvZ25pdG9Kd3RUb2tlbi5jYWxsKHRoaXMsIElkVG9rZW4gfHwgJycpIHx8IHRoaXM7XG4gIH1cbiAgcmV0dXJuIENvZ25pdG9JZFRva2VuO1xufShDb2duaXRvSnd0VG9rZW4pO1xuZXhwb3J0IHsgQ29nbml0b0lkVG9rZW4gYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJDb2duaXRvSnd0VG9rZW4iLCJDb2duaXRvSWRUb2tlbiIsIl9Db2duaXRvSnd0VG9rZW4iLCJfdGVtcCIsIl9yZWYiLCJJZFRva2VuIiwiY2FsbCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js":
/*!***********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoJwtToken)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n/** @class */ var CognitoJwtToken = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoJwtToken object\n   * @param {string=} token The JWT token.\n   */ function CognitoJwtToken(token) {\n        // Assign object\n        this.jwtToken = token || \"\";\n        this.payload = this.decodePayload();\n    }\n    /**\n   * @returns {string} the record's token.\n   */ var _proto = CognitoJwtToken.prototype;\n    _proto.getJwtToken = function getJwtToken() {\n        return this.jwtToken;\n    } /**\n   * @returns {int} the token's expiration (exp member).\n   */ ;\n    _proto.getExpiration = function getExpiration() {\n        return this.payload.exp;\n    } /**\n   * @returns {int} the token's \"issued at\" (iat member).\n   */ ;\n    _proto.getIssuedAt = function getIssuedAt() {\n        return this.payload.iat;\n    } /**\n   * @returns {object} the token's payload.\n   */ ;\n    _proto.decodePayload = function decodePayload() {\n        var payload = this.jwtToken.split(\".\")[1];\n        try {\n            return JSON.parse(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(payload, \"base64\").toString(\"utf8\"));\n        } catch (err) {\n            return {};\n        }\n    };\n    return CognitoJwtToken;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b0p3dFRva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Q0FHQyxHQUUrQjtBQUVoQyxXQUFXLEdBQ1gsSUFBSUMsa0JBQWtCLFdBQVcsR0FBRTtJQUNqQzs7O0dBR0MsR0FDRCxTQUFTQSxnQkFBZ0JDLEtBQUs7UUFDNUIsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxTQUFTO1FBQ3pCLElBQUksQ0FBQ0UsT0FBTyxHQUFHLElBQUksQ0FBQ0MsYUFBYTtJQUNuQztJQUVBOztHQUVDLEdBQ0QsSUFBSUMsU0FBU0wsZ0JBQWdCTSxTQUFTO0lBQ3RDRCxPQUFPRSxXQUFXLEdBQUcsU0FBU0E7UUFDNUIsT0FBTyxJQUFJLENBQUNMLFFBQVE7SUFDdEIsRUFFQTs7R0FFQztJQUNERyxPQUFPRyxhQUFhLEdBQUcsU0FBU0E7UUFDOUIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ00sR0FBRztJQUN6QixFQUVBOztHQUVDO0lBQ0RKLE9BQU9LLFdBQVcsR0FBRyxTQUFTQTtRQUM1QixPQUFPLElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxHQUFHO0lBQ3pCLEVBRUE7O0dBRUM7SUFDRE4sT0FBT0QsYUFBYSxHQUFHLFNBQVNBO1FBQzlCLElBQUlELFVBQVUsSUFBSSxDQUFDRCxRQUFRLENBQUNVLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6QyxJQUFJO1lBQ0YsT0FBT0MsS0FBS0MsS0FBSyxDQUFDZiwwQ0FBTUEsQ0FBQ2dCLElBQUksQ0FBQ1osU0FBUyxVQUFVYSxRQUFRLENBQUM7UUFDNUQsRUFBRSxPQUFPQyxLQUFLO1lBQ1osT0FBTyxDQUFDO1FBQ1Y7SUFDRjtJQUNBLE9BQU9qQjtBQUNUO0FBQ3NDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0NvZ25pdG9Kd3RUb2tlbi5qcz9jNzFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5cbi8qKiBAY2xhc3MgKi9cbnZhciBDb2duaXRvSnd0VG9rZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBDb2duaXRvSnd0VG9rZW4gb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdG9rZW4gVGhlIEpXVCB0b2tlbi5cbiAgICovXG4gIGZ1bmN0aW9uIENvZ25pdG9Kd3RUb2tlbih0b2tlbikge1xuICAgIC8vIEFzc2lnbiBvYmplY3RcbiAgICB0aGlzLmp3dFRva2VuID0gdG9rZW4gfHwgJyc7XG4gICAgdGhpcy5wYXlsb2FkID0gdGhpcy5kZWNvZGVQYXlsb2FkKCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHJlY29yZCdzIHRva2VuLlxuICAgKi9cbiAgdmFyIF9wcm90byA9IENvZ25pdG9Kd3RUb2tlbi5wcm90b3R5cGU7XG4gIF9wcm90by5nZXRKd3RUb2tlbiA9IGZ1bmN0aW9uIGdldEp3dFRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmp3dFRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtpbnR9IHRoZSB0b2tlbidzIGV4cGlyYXRpb24gKGV4cCBtZW1iZXIpLlxuICAgKi87XG4gIF9wcm90by5nZXRFeHBpcmF0aW9uID0gZnVuY3Rpb24gZ2V0RXhwaXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXlsb2FkLmV4cDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7aW50fSB0aGUgdG9rZW4ncyBcImlzc3VlZCBhdFwiIChpYXQgbWVtYmVyKS5cbiAgICovO1xuICBfcHJvdG8uZ2V0SXNzdWVkQXQgPSBmdW5jdGlvbiBnZXRJc3N1ZWRBdCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXlsb2FkLmlhdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSB0aGUgdG9rZW4ncyBwYXlsb2FkLlxuICAgKi87XG4gIF9wcm90by5kZWNvZGVQYXlsb2FkID0gZnVuY3Rpb24gZGVjb2RlUGF5bG9hZCgpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRoaXMuand0VG9rZW4uc3BsaXQoJy4nKVsxXTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoQnVmZmVyLmZyb20ocGF5bG9hZCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIENvZ25pdG9Kd3RUb2tlbjtcbn0oKTtcbmV4cG9ydCB7IENvZ25pdG9Kd3RUb2tlbiBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbIkJ1ZmZlciIsIkNvZ25pdG9Kd3RUb2tlbiIsInRva2VuIiwiand0VG9rZW4iLCJwYXlsb2FkIiwiZGVjb2RlUGF5bG9hZCIsIl9wcm90byIsInByb3RvdHlwZSIsImdldEp3dFRva2VuIiwiZ2V0RXhwaXJhdGlvbiIsImV4cCIsImdldElzc3VlZEF0IiwiaWF0Iiwic3BsaXQiLCJKU09OIiwicGFyc2UiLCJmcm9tIiwidG9TdHJpbmciLCJlcnIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js":
/*!***************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoRefreshToken)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /** @class */ var CognitoRefreshToken = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoRefreshToken object\n   * @param {string=} RefreshToken The JWT refresh token.\n   */ function CognitoRefreshToken(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;\n        // Assign object\n        this.token = RefreshToken || \"\";\n    }\n    /**\n   * @returns {string} the record's token.\n   */ var _proto = CognitoRefreshToken.prototype;\n    _proto.getToken = function getToken() {\n        return this.token;\n    };\n    return CognitoRefreshToken;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b1JlZnJlc2hUb2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ0QsV0FBVyxHQUNYLElBQUlBLHNCQUFzQixXQUFXLEdBQUU7SUFDckM7OztHQUdDLEdBQ0QsU0FBU0Esb0JBQW9CQyxLQUFLO1FBQ2hDLElBQUlDLE9BQU9ELFVBQVUsS0FBSyxJQUFJLENBQUMsSUFBSUEsT0FDakNFLGVBQWVELEtBQUtDLFlBQVk7UUFDbEMsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHRCxnQkFBZ0I7SUFDL0I7SUFFQTs7R0FFQyxHQUNELElBQUlFLFNBQVNMLG9CQUFvQk0sU0FBUztJQUMxQ0QsT0FBT0UsUUFBUSxHQUFHLFNBQVNBO1FBQ3pCLE9BQU8sSUFBSSxDQUFDSCxLQUFLO0lBQ25CO0lBQ0EsT0FBT0o7QUFDVDtBQUMwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy9Db2duaXRvUmVmcmVzaFRva2VuLmpzPzM2MzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKiBAY2xhc3MgKi9cbnZhciBDb2duaXRvUmVmcmVzaFRva2VuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgQ29nbml0b1JlZnJlc2hUb2tlbiBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBSZWZyZXNoVG9rZW4gVGhlIEpXVCByZWZyZXNoIHRva2VuLlxuICAgKi9cbiAgZnVuY3Rpb24gQ29nbml0b1JlZnJlc2hUb2tlbihfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBSZWZyZXNoVG9rZW4gPSBfcmVmLlJlZnJlc2hUb2tlbjtcbiAgICAvLyBBc3NpZ24gb2JqZWN0XG4gICAgdGhpcy50b2tlbiA9IFJlZnJlc2hUb2tlbiB8fCAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgcmVjb3JkJ3MgdG9rZW4uXG4gICAqL1xuICB2YXIgX3Byb3RvID0gQ29nbml0b1JlZnJlc2hUb2tlbi5wcm90b3R5cGU7XG4gIF9wcm90by5nZXRUb2tlbiA9IGZ1bmN0aW9uIGdldFRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLnRva2VuO1xuICB9O1xuICByZXR1cm4gQ29nbml0b1JlZnJlc2hUb2tlbjtcbn0oKTtcbmV4cG9ydCB7IENvZ25pdG9SZWZyZXNoVG9rZW4gYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJDb2duaXRvUmVmcmVzaFRva2VuIiwiX3RlbXAiLCJfcmVmIiwiUmVmcmVzaFRva2VuIiwidG9rZW4iLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJnZXRUb2tlbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoUser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoUser)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-crypto/sha256-js */ \"(ssr)/./node_modules/@aws-crypto/sha256-js/build/index.js\");\n/* harmony import */ var _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Platform */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/index.js\");\n/* harmony import */ var _BigInteger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BigInteger */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/BigInteger.js\");\n/* harmony import */ var _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AuthenticationHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js\");\n/* harmony import */ var _CognitoAccessToken__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CognitoAccessToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js\");\n/* harmony import */ var _CognitoIdToken__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CognitoIdToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js\");\n/* harmony import */ var _CognitoRefreshToken__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CognitoRefreshToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js\");\n/* harmony import */ var _CognitoUserSession__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CognitoUserSession */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js\");\n/* harmony import */ var _DateHelper__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DateHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/DateHelper.js\");\n/* harmony import */ var _CognitoUserAttribute__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./CognitoUserAttribute */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js\");\n/* harmony import */ var _StorageHelper__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./StorageHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/StorageHelper.js\");\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n\n\n\n\n\n\n\n\n\n\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */ /**\n * @callback onFailure\n * @param {*} err Failure reason.\n */ /**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */ /**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */ /**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */ /**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */ /**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */ var isNavigatorAvailable = typeof navigator !== \"undefined\";\nvar userAgent = isNavigatorAvailable ? _Platform__WEBPACK_IMPORTED_MODULE_2__.Platform.isReactNative ? \"react-native\" : navigator.userAgent : \"nodejs\";\n/** @class */ var CognitoUser = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */ function CognitoUser(data) {\n        if (data == null || data.Username == null || data.Pool == null) {\n            throw new Error(\"Username and Pool information are required.\");\n        }\n        this.username = data.Username || \"\";\n        this.pool = data.Pool;\n        this.Session = null;\n        this.client = data.Pool.client;\n        this.signInUserSession = null;\n        this.authenticationFlowType = \"USER_SRP_AUTH\";\n        this.storage = data.Storage || new _StorageHelper__WEBPACK_IMPORTED_MODULE_11__[\"default\"]().getStorage();\n        this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n        this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n    }\n    /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */ var _proto = CognitoUser.prototype;\n    _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n        this.clearCachedUserData();\n        this.signInUserSession = signInUserSession;\n        this.cacheTokens();\n    } /**\n   * @returns {CognitoUserSession} the current session for this user\n   */ ;\n    _proto.getSignInUserSession = function getSignInUserSession() {\n        return this.signInUserSession;\n    } /**\n   * @returns {string} the user's username\n   */ ;\n    _proto.getUsername = function getUsername() {\n        return this.username;\n    } /**\n   * @returns {String} the authentication flow type\n   */ ;\n    _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n        return this.authenticationFlowType;\n    } /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */ ;\n    _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n        this.authenticationFlowType = authenticationFlowType;\n    } /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */ ;\n    _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n        var _this = this;\n        var authParameters = authDetails.getAuthParameters();\n        authParameters.USERNAME = this.username;\n        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n        var jsonReq = {\n            AuthFlow: \"CUSTOM_AUTH\",\n            ClientId: this.pool.getClientId(),\n            AuthParameters: authParameters,\n            ClientMetadata: clientMetaData\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"InitiateAuth\", jsonReq, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            var challengeName = data.ChallengeName;\n            var challengeParameters = data.ChallengeParameters;\n            if (challengeName === \"CUSTOM_CHALLENGE\") {\n                _this.Session = data.Session;\n                return callback.customChallenge(challengeParameters);\n            }\n            _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n            _this.cacheTokens();\n            return callback.onSuccess(_this.signInUserSession);\n        });\n    } /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */ ;\n    _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n        if (this.authenticationFlowType === \"USER_PASSWORD_AUTH\") {\n            return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n        } else if (this.authenticationFlowType === \"USER_SRP_AUTH\" || this.authenticationFlowType === \"CUSTOM_AUTH\") {\n            return this.authenticateUserDefaultAuth(authDetails, callback);\n        }\n        return callback.onFailure(new Error(\"Authentication flow type is invalid.\"));\n    } /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */ ;\n    _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n        var _this2 = this;\n        var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.pool.getUserPoolName());\n        var dateHelper = new _DateHelper__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n        var serverBValue;\n        var salt;\n        var authParameters = {};\n        if (this.deviceKey != null) {\n            authParameters.DEVICE_KEY = this.deviceKey;\n        }\n        authParameters.USERNAME = this.username;\n        authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {\n            // getLargeAValue callback start\n            if (errOnAValue) {\n                callback.onFailure(errOnAValue);\n            }\n            authParameters.SRP_A = aValue.toString(16);\n            if (_this2.authenticationFlowType === \"CUSTOM_AUTH\") {\n                authParameters.CHALLENGE_NAME = \"SRP_A\";\n            }\n            var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n            var jsonReq = {\n                AuthFlow: _this2.authenticationFlowType,\n                ClientId: _this2.pool.getClientId(),\n                AuthParameters: authParameters,\n                ClientMetadata: clientMetaData\n            };\n            if (_this2.getUserContextData(_this2.username)) {\n                jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n            }\n            _this2.client.request(\"InitiateAuth\", jsonReq, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                var challengeParameters = data.ChallengeParameters;\n                _this2.username = challengeParameters.USER_ID_FOR_SRP;\n                _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n                serverBValue = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](challengeParameters.SRP_B, 16);\n                salt = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](challengeParameters.SALT, 16);\n                _this2.getCachedDeviceKeyAndPassword();\n                authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {\n                    // getPasswordAuthenticationKey callback start\n                    if (errOnHkdf) {\n                        callback.onFailure(errOnHkdf);\n                    }\n                    var dateNow = dateHelper.getNowString();\n                    var concatBuffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this2.pool.getUserPoolName(), \"utf8\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this2.username, \"utf8\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(challengeParameters.SECRET_BLOCK, \"base64\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dateNow, \"utf8\")\n                    ]);\n                    var awsCryptoHash = new _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_1__.Sha256(hkdf);\n                    awsCryptoHash.update(concatBuffer);\n                    var resultFromAWSCrypto = awsCryptoHash.digestSync();\n                    var signatureString = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(resultFromAWSCrypto).toString(\"base64\");\n                    var challengeResponses = {};\n                    challengeResponses.USERNAME = _this2.username;\n                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n                    challengeResponses.TIMESTAMP = dateNow;\n                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n                    if (_this2.deviceKey != null) {\n                        challengeResponses.DEVICE_KEY = _this2.deviceKey;\n                    }\n                    var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n                        return _this2.client.request(\"RespondToAuthChallenge\", challenge, function(errChallenge, dataChallenge) {\n                            if (errChallenge && errChallenge.code === \"ResourceNotFoundException\" && errChallenge.message.toLowerCase().indexOf(\"device\") !== -1) {\n                                challengeResponses.DEVICE_KEY = null;\n                                _this2.deviceKey = null;\n                                _this2.randomPassword = null;\n                                _this2.deviceGroupKey = null;\n                                _this2.clearCachedDeviceKeyAndPassword();\n                                return respondToAuthChallenge(challenge, challengeCallback);\n                            }\n                            return challengeCallback(errChallenge, dataChallenge);\n                        });\n                    };\n                    var jsonReqResp = {\n                        ChallengeName: \"PASSWORD_VERIFIER\",\n                        ClientId: _this2.pool.getClientId(),\n                        ChallengeResponses: challengeResponses,\n                        Session: data.Session,\n                        ClientMetadata: clientMetaData\n                    };\n                    if (_this2.getUserContextData()) {\n                        jsonReqResp.UserContextData = _this2.getUserContextData();\n                    }\n                    respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {\n                        if (errAuthenticate) {\n                            return callback.onFailure(errAuthenticate);\n                        }\n                        return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n                    });\n                    return undefined;\n                // getPasswordAuthenticationKey callback end\n                });\n                return undefined;\n            });\n        // getLargeAValue callback end\n        });\n    } /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */ ;\n    _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n        var _this3 = this;\n        var authParameters = {};\n        authParameters.USERNAME = this.username;\n        authParameters.PASSWORD = authDetails.getPassword();\n        if (!authParameters.PASSWORD) {\n            callback.onFailure(new Error(\"PASSWORD parameter is required\"));\n            return;\n        }\n        var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.pool.getUserPoolName());\n        this.getCachedDeviceKeyAndPassword();\n        if (this.deviceKey != null) {\n            authParameters.DEVICE_KEY = this.deviceKey;\n        }\n        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n        var jsonReq = {\n            AuthFlow: \"USER_PASSWORD_AUTH\",\n            ClientId: this.pool.getClientId(),\n            AuthParameters: authParameters,\n            ClientMetadata: clientMetaData\n        };\n        if (this.getUserContextData(this.username)) {\n            jsonReq.UserContextData = this.getUserContextData(this.username);\n        }\n        // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n        // Cognito UserPools verifies password and returns tokens.\n        this.client.request(\"InitiateAuth\", jsonReq, function(err, authResult) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n        });\n    } /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */ ;\n    _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n        var _this4 = this;\n        var challengeName = dataAuthenticate.ChallengeName;\n        var challengeParameters = dataAuthenticate.ChallengeParameters;\n        if (challengeName === \"SMS_MFA\") {\n            this.Session = dataAuthenticate.Session;\n            return callback.mfaRequired(challengeName, challengeParameters);\n        }\n        if (challengeName === \"SELECT_MFA_TYPE\") {\n            this.Session = dataAuthenticate.Session;\n            return callback.selectMFAType(challengeName, challengeParameters);\n        }\n        if (challengeName === \"MFA_SETUP\") {\n            this.Session = dataAuthenticate.Session;\n            return callback.mfaSetup(challengeName, challengeParameters);\n        }\n        if (challengeName === \"SOFTWARE_TOKEN_MFA\") {\n            this.Session = dataAuthenticate.Session;\n            return callback.totpRequired(challengeName, challengeParameters);\n        }\n        if (challengeName === \"CUSTOM_CHALLENGE\") {\n            this.Session = dataAuthenticate.Session;\n            return callback.customChallenge(challengeParameters);\n        }\n        if (challengeName === \"NEW_PASSWORD_REQUIRED\") {\n            this.Session = dataAuthenticate.Session;\n            var userAttributes = null;\n            var rawRequiredAttributes = null;\n            var requiredAttributes = [];\n            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n            if (challengeParameters) {\n                userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n                rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n            }\n            if (rawRequiredAttributes) {\n                for(var i = 0; i < rawRequiredAttributes.length; i++){\n                    requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n                }\n            }\n            return callback.newPasswordRequired(userAttributes, requiredAttributes);\n        }\n        if (challengeName === \"DEVICE_SRP_AUTH\") {\n            this.Session = dataAuthenticate.Session;\n            this.getDeviceResponse(callback);\n            return undefined;\n        }\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n        this.challengeName = challengeName;\n        this.cacheTokens();\n        var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n        if (newDeviceMetadata == null) {\n            return callback.onSuccess(this.signInUserSession);\n        }\n        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {\n            if (errGenHash) {\n                return callback.onFailure(errGenHash);\n            }\n            var deviceSecretVerifierConfig = {\n                Salt: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(authenticationHelper.getSaltDevices(), \"hex\").toString(\"base64\"),\n                PasswordVerifier: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(authenticationHelper.getVerifierDevices(), \"hex\").toString(\"base64\")\n            };\n            _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n            _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n            _this4.randomPassword = authenticationHelper.getRandomPassword();\n            _this4.client.request(\"ConfirmDevice\", {\n                DeviceKey: newDeviceMetadata.DeviceKey,\n                AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n                DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n                DeviceName: userAgent\n            }, function(errConfirm, dataConfirm) {\n                if (errConfirm) {\n                    return callback.onFailure(errConfirm);\n                }\n                _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n                _this4.cacheDeviceKeyAndPassword();\n                if (dataConfirm.UserConfirmationNecessary === true) {\n                    return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n                }\n                return callback.onSuccess(_this4.signInUserSession);\n            });\n            return undefined;\n        });\n        return undefined;\n    } /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n        var _this5 = this;\n        if (!newPassword) {\n            return callback.onFailure(new Error(\"New password is required.\"));\n        }\n        var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.pool.getUserPoolName());\n        var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n        var finalUserAttributes = {};\n        if (requiredAttributeData) {\n            Object.keys(requiredAttributeData).forEach(function(key) {\n                finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n            });\n        }\n        finalUserAttributes.NEW_PASSWORD = newPassword;\n        finalUserAttributes.USERNAME = this.username;\n        var jsonReq = {\n            ChallengeName: \"NEW_PASSWORD_REQUIRED\",\n            ClientId: this.pool.getClientId(),\n            ChallengeResponses: finalUserAttributes,\n            Session: this.Session,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"RespondToAuthChallenge\", jsonReq, function(errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n                return callback.onFailure(errAuthenticate);\n            }\n            return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n        });\n        return undefined;\n    } /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */ ;\n    _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n        var _this6 = this;\n        var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.deviceGroupKey);\n        var dateHelper = new _DateHelper__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n        var authParameters = {};\n        authParameters.USERNAME = this.username;\n        authParameters.DEVICE_KEY = this.deviceKey;\n        authenticationHelper.getLargeAValue(function(errAValue, aValue) {\n            // getLargeAValue callback start\n            if (errAValue) {\n                callback.onFailure(errAValue);\n            }\n            authParameters.SRP_A = aValue.toString(16);\n            var jsonReq = {\n                ChallengeName: \"DEVICE_SRP_AUTH\",\n                ClientId: _this6.pool.getClientId(),\n                ChallengeResponses: authParameters,\n                ClientMetadata: clientMetadata,\n                Session: _this6.Session\n            };\n            if (_this6.getUserContextData()) {\n                jsonReq.UserContextData = _this6.getUserContextData();\n            }\n            _this6.client.request(\"RespondToAuthChallenge\", jsonReq, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                var challengeParameters = data.ChallengeParameters;\n                var serverBValue = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](challengeParameters.SRP_B, 16);\n                var salt = new _BigInteger__WEBPACK_IMPORTED_MODULE_3__[\"default\"](challengeParameters.SALT, 16);\n                authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {\n                    // getPasswordAuthenticationKey callback start\n                    if (errHkdf) {\n                        return callback.onFailure(errHkdf);\n                    }\n                    var dateNow = dateHelper.getNowString();\n                    var concatBuffer = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this6.deviceGroupKey, \"utf8\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(_this6.deviceKey, \"utf8\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(challengeParameters.SECRET_BLOCK, \"base64\"),\n                        buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dateNow, \"utf8\")\n                    ]);\n                    var awsCryptoHash = new _aws_crypto_sha256_js__WEBPACK_IMPORTED_MODULE_1__.Sha256(hkdf);\n                    awsCryptoHash.update(concatBuffer);\n                    var resultFromAWSCrypto = awsCryptoHash.digestSync();\n                    var signatureString = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(resultFromAWSCrypto).toString(\"base64\");\n                    var challengeResponses = {};\n                    challengeResponses.USERNAME = _this6.username;\n                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n                    challengeResponses.TIMESTAMP = dateNow;\n                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n                    challengeResponses.DEVICE_KEY = _this6.deviceKey;\n                    var jsonReqResp = {\n                        ChallengeName: \"DEVICE_PASSWORD_VERIFIER\",\n                        ClientId: _this6.pool.getClientId(),\n                        ChallengeResponses: challengeResponses,\n                        Session: data.Session\n                    };\n                    if (_this6.getUserContextData()) {\n                        jsonReqResp.UserContextData = _this6.getUserContextData();\n                    }\n                    _this6.client.request(\"RespondToAuthChallenge\", jsonReqResp, function(errAuthenticate, dataAuthenticate) {\n                        if (errAuthenticate) {\n                            return callback.onFailure(errAuthenticate);\n                        }\n                        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n                        _this6.cacheTokens();\n                        return callback.onSuccess(_this6.signInUserSession);\n                    });\n                    return undefined;\n                // getPasswordAuthenticationKey callback end\n                });\n                return undefined;\n            });\n        // getLargeAValue callback end\n        });\n    } /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n        var jsonReq = {\n            ClientId: this.pool.getClientId(),\n            ConfirmationCode: confirmationCode,\n            Username: this.username,\n            ForceAliasCreation: forceAliasCreation,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"ConfirmSignUp\", jsonReq, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, \"SUCCESS\");\n        });\n    } /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n        var _this7 = this;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = this.username;\n        challengeResponses.ANSWER = answerChallenge;\n        var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.pool.getUserPoolName());\n        this.getCachedDeviceKeyAndPassword();\n        if (this.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = this.deviceKey;\n        }\n        var jsonReq = {\n            ChallengeName: \"CUSTOM_CHALLENGE\",\n            ChallengeResponses: challengeResponses,\n            ClientId: this.pool.getClientId(),\n            Session: this.Session,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"RespondToAuthChallenge\", jsonReq, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n        });\n    } /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n        var _this8 = this;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = this.username;\n        challengeResponses.SMS_MFA_CODE = confirmationCode;\n        var mfaTypeSelection = mfaType || \"SMS_MFA\";\n        if (mfaTypeSelection === \"SOFTWARE_TOKEN_MFA\") {\n            challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n        }\n        if (this.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = this.deviceKey;\n        }\n        var jsonReq = {\n            ChallengeName: mfaTypeSelection,\n            ChallengeResponses: challengeResponses,\n            ClientId: this.pool.getClientId(),\n            Session: this.Session,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"RespondToAuthChallenge\", jsonReq, function(err, dataAuthenticate) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            var challengeName = dataAuthenticate.ChallengeName;\n            if (challengeName === \"DEVICE_SRP_AUTH\") {\n                _this8.getDeviceResponse(callback);\n                return undefined;\n            }\n            _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this8.cacheTokens();\n            if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n                return callback.onSuccess(_this8.signInUserSession);\n            }\n            var authenticationHelper = new _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_this8.pool.getUserPoolName());\n            authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {\n                if (errGenHash) {\n                    return callback.onFailure(errGenHash);\n                }\n                var deviceSecretVerifierConfig = {\n                    Salt: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(authenticationHelper.getSaltDevices(), \"hex\").toString(\"base64\"),\n                    PasswordVerifier: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(authenticationHelper.getVerifierDevices(), \"hex\").toString(\"base64\")\n                };\n                _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n                _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n                _this8.randomPassword = authenticationHelper.getRandomPassword();\n                _this8.client.request(\"ConfirmDevice\", {\n                    DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n                    AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n                    DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n                    DeviceName: userAgent\n                }, function(errConfirm, dataConfirm) {\n                    if (errConfirm) {\n                        return callback.onFailure(errConfirm);\n                    }\n                    _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n                    _this8.cacheDeviceKeyAndPassword();\n                    if (dataConfirm.UserConfirmationNecessary === true) {\n                        return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n                    }\n                    return callback.onSuccess(_this8.signInUserSession);\n                });\n                return undefined;\n            });\n            return undefined;\n        });\n    } /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"ChangePassword\", {\n            PreviousPassword: oldUserPassword,\n            ProposedPassword: newUserPassword,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            ClientMetadata: clientMetadata\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, \"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.enableMFA = function enableMFA(callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        var mfaOptions = [];\n        var mfaEnabled = {\n            DeliveryMedium: \"SMS\",\n            AttributeName: \"phone_number\"\n        };\n        mfaOptions.push(mfaEnabled);\n        this.client.request(\"SetUserSettings\", {\n            MFAOptions: mfaOptions,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, \"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"SetUserMFAPreference\", {\n            SMSMfaSettings: smsMfaSettings,\n            SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, \"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.disableMFA = function disableMFA(callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        var mfaOptions = [];\n        this.client.request(\"SetUserSettings\", {\n            MFAOptions: mfaOptions,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, \"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n        var _this9 = this;\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"DeleteUser\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            ClientMetadata: clientMetadata\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            _this9.clearCachedUser();\n            return callback(null, \"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n        var _this10 = this;\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"UpdateUserAttributes\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            UserAttributes: attributes,\n            ClientMetadata: clientMetadata\n        }, function(err, result) {\n            if (err) {\n                return callback(err, null);\n            }\n            // update cached user\n            return _this10.getUserData(function() {\n                return callback(null, \"SUCCESS\", result);\n            }, {\n                bypassCache: true\n            });\n        });\n        return undefined;\n    } /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.getUserAttributes = function getUserAttributes(callback) {\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"GetUser\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err, userData) {\n            if (err) {\n                return callback(err, null);\n            }\n            var attributeList = [];\n            for(var i = 0; i < userData.UserAttributes.length; i++){\n                var attribute = {\n                    Name: userData.UserAttributes[i].Name,\n                    Value: userData.UserAttributes[i].Value\n                };\n                var userAttribute = new _CognitoUserAttribute__WEBPACK_IMPORTED_MODULE_10__[\"default\"](attribute);\n                attributeList.push(userAttribute);\n            }\n            return callback(null, attributeList);\n        });\n        return undefined;\n    } /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.getMFAOptions = function getMFAOptions(callback) {\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"GetUser\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err, userData) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, userData.MFAOptions);\n        });\n        return undefined;\n    } /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */ ;\n    _proto.createGetUserRequest = function createGetUserRequest() {\n        return this.client.promisifyRequest(\"GetUser\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        });\n    } /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */ ;\n    _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n        var _this11 = this;\n        if (options === void 0) {\n            options = {};\n        }\n        // best effort, if not possible\n        return new Promise(function(resolve) {\n            var refresh = _this11.signInUserSession.getRefreshToken();\n            if (refresh && refresh.getToken()) {\n                _this11.refreshSession(refresh, resolve, options.clientMetadata);\n            } else {\n                resolve();\n            }\n        });\n    } /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */ ;\n    _proto.getUserData = function getUserData(callback, params) {\n        var _this12 = this;\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            this.clearCachedUserData();\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        var userData = this.getUserDataFromCache();\n        if (!userData) {\n            this.fetchUserData().then(function(data) {\n                callback(null, data);\n            })[\"catch\"](callback);\n            return;\n        }\n        if (this.isFetchUserDataAndTokenRequired(params)) {\n            this.fetchUserData().then(function(data) {\n                return _this12.refreshSessionIfPossible(params).then(function() {\n                    return data;\n                });\n            }).then(function(data) {\n                return callback(null, data);\n            })[\"catch\"](callback);\n            return;\n        }\n        try {\n            callback(null, JSON.parse(userData));\n            return;\n        } catch (err) {\n            this.clearCachedUserData();\n            callback(err, null);\n            return;\n        }\n    } /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */ ;\n    _proto.getUserDataFromCache = function getUserDataFromCache() {\n        var userData = this.storage.getItem(this.userDataKey);\n        return userData;\n    } /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */ ;\n    _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n        var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n        return bypassCache;\n    } /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */ ;\n    _proto.fetchUserData = function fetchUserData() {\n        var _this13 = this;\n        return this.createGetUserRequest().then(function(data) {\n            _this13.cacheUserData(data);\n            return data;\n        });\n    } /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n        var _this14 = this;\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            return callback(new Error(\"User is not authenticated\"), null);\n        }\n        this.client.request(\"DeleteUserAttributes\", {\n            UserAttributeNames: attributeList,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback(err, null);\n            }\n            // update cached user\n            return _this14.getUserData(function() {\n                return callback(null, \"SUCCESS\");\n            }, {\n                bypassCache: true\n            });\n        });\n        return undefined;\n    } /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n        var jsonReq = {\n            ClientId: this.pool.getClientId(),\n            Username: this.username,\n            ClientMetadata: clientMetadata\n        };\n        this.client.request(\"ResendConfirmationCode\", jsonReq, function(err, result) {\n            if (err) {\n                return callback(err, null);\n            }\n            return callback(null, result);\n        });\n    } /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */ ;\n    _proto.getSession = function getSession(callback, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (this.username == null) {\n            return callback(new Error(\"Username is null. Cannot retrieve a new session\"), null);\n        }\n        if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n            return callback(null, this.signInUserSession);\n        }\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n        var idTokenKey = keyPrefix + \".idToken\";\n        var accessTokenKey = keyPrefix + \".accessToken\";\n        var refreshTokenKey = keyPrefix + \".refreshToken\";\n        var clockDriftKey = keyPrefix + \".clockDrift\";\n        if (this.storage.getItem(idTokenKey)) {\n            var idToken = new _CognitoIdToken__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n                IdToken: this.storage.getItem(idTokenKey)\n            });\n            var accessToken = new _CognitoAccessToken__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n                AccessToken: this.storage.getItem(accessTokenKey)\n            });\n            var refreshToken = new _CognitoRefreshToken__WEBPACK_IMPORTED_MODULE_7__[\"default\"]({\n                RefreshToken: this.storage.getItem(refreshTokenKey)\n            });\n            var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n            var sessionData = {\n                IdToken: idToken,\n                AccessToken: accessToken,\n                RefreshToken: refreshToken,\n                ClockDrift: clockDrift\n            };\n            var cachedSession = new _CognitoUserSession__WEBPACK_IMPORTED_MODULE_8__[\"default\"](sessionData);\n            if (cachedSession.isValid()) {\n                this.signInUserSession = cachedSession;\n                return callback(null, this.signInUserSession);\n            }\n            if (!refreshToken.getToken()) {\n                return callback(new Error(\"Cannot retrieve a new session. Please authenticate.\"), null);\n            }\n            this.refreshSession(refreshToken, callback, options.clientMetadata);\n        } else {\n            callback(new Error(\"Local storage is missing an ID Token, Please authenticate\"), null);\n        }\n        return undefined;\n    } /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n        var _this15 = this;\n        var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n        var authParameters = {};\n        authParameters.REFRESH_TOKEN = refreshToken.getToken();\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n        var lastUserKey = keyPrefix + \".LastAuthUser\";\n        if (this.storage.getItem(lastUserKey)) {\n            this.username = this.storage.getItem(lastUserKey);\n            var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n            this.deviceKey = this.storage.getItem(deviceKeyKey);\n            authParameters.DEVICE_KEY = this.deviceKey;\n        }\n        var jsonReq = {\n            ClientId: this.pool.getClientId(),\n            AuthFlow: \"REFRESH_TOKEN_AUTH\",\n            AuthParameters: authParameters,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"InitiateAuth\", jsonReq, function(err, authResult) {\n            if (err) {\n                if (err.code === \"NotAuthorizedException\") {\n                    _this15.clearCachedUser();\n                }\n                return wrappedCallback(err, null);\n            }\n            if (authResult) {\n                var authenticationResult = authResult.AuthenticationResult;\n                if (!Object.prototype.hasOwnProperty.call(authenticationResult, \"RefreshToken\")) {\n                    authenticationResult.RefreshToken = refreshToken.getToken();\n                }\n                _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);\n                _this15.cacheTokens();\n                return wrappedCallback(null, _this15.signInUserSession);\n            }\n            return undefined;\n        });\n    } /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */ ;\n    _proto.cacheTokens = function cacheTokens() {\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n        var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n        var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n        var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n        var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n        var lastUserKey = keyPrefix + \".LastAuthUser\";\n        this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n        this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n        this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n        this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n        this.storage.setItem(lastUserKey, this.username);\n    } /**\n   * This is to cache user data\n   */ ;\n    _proto.cacheUserData = function cacheUserData(userData) {\n        this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n    } /**\n   * This is to remove cached user data\n   */ ;\n    _proto.clearCachedUserData = function clearCachedUserData() {\n        this.storage.removeItem(this.userDataKey);\n    };\n    _proto.clearCachedUser = function clearCachedUser() {\n        this.clearCachedTokens();\n        this.clearCachedUserData();\n    } /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */ ;\n    _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n        var deviceKeyKey = keyPrefix + \".deviceKey\";\n        var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n        var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n        this.storage.setItem(deviceKeyKey, this.deviceKey);\n        this.storage.setItem(randomPasswordKey, this.randomPassword);\n        this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n    } /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */ ;\n    _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n        var deviceKeyKey = keyPrefix + \".deviceKey\";\n        var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n        var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n        if (this.storage.getItem(deviceKeyKey)) {\n            this.deviceKey = this.storage.getItem(deviceKeyKey);\n            this.randomPassword = this.storage.getItem(randomPasswordKey);\n            this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n        }\n    } /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */ ;\n    _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n        var deviceKeyKey = keyPrefix + \".deviceKey\";\n        var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n        var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n        this.storage.removeItem(deviceKeyKey);\n        this.storage.removeItem(randomPasswordKey);\n        this.storage.removeItem(deviceGroupKeyKey);\n    } /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */ ;\n    _proto.clearCachedTokens = function clearCachedTokens() {\n        var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n        var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n        var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n        var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n        var lastUserKey = keyPrefix + \".LastAuthUser\";\n        var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n        this.storage.removeItem(idTokenKey);\n        this.storage.removeItem(accessTokenKey);\n        this.storage.removeItem(refreshTokenKey);\n        this.storage.removeItem(lastUserKey);\n        this.storage.removeItem(clockDriftKey);\n    } /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */ ;\n    _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n        var idToken = new _CognitoIdToken__WEBPACK_IMPORTED_MODULE_6__[\"default\"](authResult);\n        var accessToken = new _CognitoAccessToken__WEBPACK_IMPORTED_MODULE_5__[\"default\"](authResult);\n        var refreshToken = new _CognitoRefreshToken__WEBPACK_IMPORTED_MODULE_7__[\"default\"](authResult);\n        var sessionData = {\n            IdToken: idToken,\n            AccessToken: accessToken,\n            RefreshToken: refreshToken\n        };\n        return new _CognitoUserSession__WEBPACK_IMPORTED_MODULE_8__[\"default\"](sessionData);\n    } /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n        var jsonReq = {\n            ClientId: this.pool.getClientId(),\n            Username: this.username,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"ForgotPassword\", jsonReq, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            if (typeof callback.inputVerificationCode === \"function\") {\n                return callback.inputVerificationCode(data);\n            }\n            return callback.onSuccess(data);\n        });\n    } /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n        var jsonReq = {\n            ClientId: this.pool.getClientId(),\n            Username: this.username,\n            ConfirmationCode: confirmationCode,\n            Password: newPassword,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"ConfirmForgotPassword\", jsonReq, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n    } /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"GetUserAttributeVerificationCode\", {\n            AttributeName: attributeName,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            ClientMetadata: clientMetadata\n        }, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            if (typeof callback.inputVerificationCode === \"function\") {\n                return callback.inputVerificationCode(data);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"VerifyUserAttribute\", {\n            AttributeName: attributeName,\n            Code: confirmationCode,\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */ ;\n    _proto.getDevice = function getDevice(callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"GetDevice\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            DeviceKey: this.deviceKey\n        }, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(data);\n        });\n        return undefined;\n    } /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"ForgetDevice\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            DeviceKey: deviceKey\n        }, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.forgetDevice = function forgetDevice(callback) {\n        var _this16 = this;\n        this.forgetSpecificDevice(this.deviceKey, {\n            onFailure: callback.onFailure,\n            onSuccess: function onSuccess(result) {\n                _this16.deviceKey = null;\n                _this16.deviceGroupKey = null;\n                _this16.randomPassword = null;\n                _this16.clearCachedDeviceKeyAndPassword();\n                return callback.onSuccess(result);\n            }\n        });\n    } /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"UpdateDeviceStatus\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            DeviceKey: this.deviceKey,\n            DeviceRememberedStatus: \"remembered\"\n        }, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"UpdateDeviceStatus\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            DeviceKey: this.deviceKey,\n            DeviceRememberedStatus: \"not_remembered\"\n        }, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */ ;\n    _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        var requestParams = {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n            Limit: limit\n        };\n        if (paginationToken) {\n            requestParams.PaginationToken = paginationToken;\n        }\n        this.client.request(\"ListDevices\", requestParams, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            return callback.onSuccess(data);\n        });\n        return undefined;\n    } /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */ ;\n    _proto.globalSignOut = function globalSignOut(callback) {\n        var _this17 = this;\n        if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n            return callback.onFailure(new Error(\"User is not authenticated\"));\n        }\n        this.client.request(\"GlobalSignOut\", {\n            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n        }, function(err) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            _this17.clearCachedUser();\n            return callback.onSuccess(\"SUCCESS\");\n        });\n        return undefined;\n    } /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */ ;\n    _proto.signOut = function signOut(revokeTokenCallback) {\n        var _this18 = this;\n        // If tokens won't be revoked, we just clean the client data.\n        if (!revokeTokenCallback || typeof revokeTokenCallback !== \"function\") {\n            this.cleanClientData();\n            return;\n        }\n        this.getSession(function(error, _session) {\n            if (error) {\n                return revokeTokenCallback(error);\n            }\n            _this18.revokeTokens(function(err) {\n                _this18.cleanClientData();\n                revokeTokenCallback(err);\n            });\n        });\n    };\n    _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {\n        if (revokeTokenCallback === void 0) {\n            revokeTokenCallback = function revokeTokenCallback() {};\n        }\n        if (typeof revokeTokenCallback !== \"function\") {\n            throw new Error(\"Invalid revokeTokenCallback. It should be a function.\");\n        }\n        var tokensToBeRevoked = [];\n        if (!this.signInUserSession) {\n            var error = new Error(\"User is not authenticated\");\n            return revokeTokenCallback(error);\n        }\n        if (!this.signInUserSession.getAccessToken()) {\n            var _error = new Error(\"No Access token available\");\n            return revokeTokenCallback(_error);\n        }\n        var refreshToken = this.signInUserSession.getRefreshToken().getToken();\n        var accessToken = this.signInUserSession.getAccessToken();\n        if (this.isSessionRevocable(accessToken)) {\n            if (refreshToken) {\n                return this.revokeToken({\n                    token: refreshToken,\n                    callback: revokeTokenCallback\n                });\n            }\n        }\n        revokeTokenCallback();\n    };\n    _proto.isSessionRevocable = function isSessionRevocable(token) {\n        if (token && typeof token.decodePayload === \"function\") {\n            try {\n                var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;\n                return !!origin_jti;\n            } catch (err) {\n            // Nothing to do, token doesnt have origin_jti claim\n            }\n        }\n        return false;\n    };\n    _proto.cleanClientData = function cleanClientData() {\n        this.signInUserSession = null;\n        this.clearCachedUser();\n    };\n    _proto.revokeToken = function revokeToken(_ref2) {\n        var token = _ref2.token, callback = _ref2.callback;\n        this.client.requestWithRetry(\"RevokeToken\", {\n            Token: token,\n            ClientId: this.pool.getClientId()\n        }, function(err) {\n            if (err) {\n                return callback(err);\n            }\n            callback();\n        });\n    } /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n        var _this19 = this;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = this.username;\n        challengeResponses.ANSWER = answerChallenge;\n        var jsonReq = {\n            ChallengeName: \"SELECT_MFA_TYPE\",\n            ChallengeResponses: challengeResponses,\n            ClientId: this.pool.getClientId(),\n            Session: this.Session\n        };\n        if (this.getUserContextData()) {\n            jsonReq.UserContextData = this.getUserContextData();\n        }\n        this.client.request(\"RespondToAuthChallenge\", jsonReq, function(err, data) {\n            if (err) {\n                return callback.onFailure(err);\n            }\n            _this19.Session = data.Session;\n            if (answerChallenge === \"SMS_MFA\") {\n                return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n            }\n            if (answerChallenge === \"SOFTWARE_TOKEN_MFA\") {\n                return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n            }\n            return undefined;\n        });\n    } /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */ ;\n    _proto.getUserContextData = function getUserContextData() {\n        var pool = this.pool;\n        return pool.getUserContextData(this.username);\n    } /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n        var _this20 = this;\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            this.client.request(\"AssociateSoftwareToken\", {\n                Session: this.Session\n            }, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                _this20.Session = data.Session;\n                return callback.associateSecretCode(data.SecretCode);\n            });\n        } else {\n            this.client.request(\"AssociateSoftwareToken\", {\n                AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n            }, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                return callback.associateSecretCode(data.SecretCode);\n            });\n        }\n    } /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */ ;\n    _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n        var _this21 = this;\n        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n            this.client.request(\"VerifySoftwareToken\", {\n                Session: this.Session,\n                UserCode: totpCode,\n                FriendlyDeviceName: friendlyDeviceName\n            }, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                _this21.Session = data.Session;\n                var challengeResponses = {};\n                challengeResponses.USERNAME = _this21.username;\n                var jsonReq = {\n                    ChallengeName: \"MFA_SETUP\",\n                    ClientId: _this21.pool.getClientId(),\n                    ChallengeResponses: challengeResponses,\n                    Session: _this21.Session\n                };\n                if (_this21.getUserContextData()) {\n                    jsonReq.UserContextData = _this21.getUserContextData();\n                }\n                _this21.client.request(\"RespondToAuthChallenge\", jsonReq, function(errRespond, dataRespond) {\n                    if (errRespond) {\n                        return callback.onFailure(errRespond);\n                    }\n                    _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);\n                    _this21.cacheTokens();\n                    return callback.onSuccess(_this21.signInUserSession);\n                });\n                return undefined;\n            });\n        } else {\n            this.client.request(\"VerifySoftwareToken\", {\n                AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n                UserCode: totpCode,\n                FriendlyDeviceName: friendlyDeviceName\n            }, function(err, data) {\n                if (err) {\n                    return callback.onFailure(err);\n                }\n                return callback.onSuccess(data);\n            });\n        }\n    };\n    return CognitoUser;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js":
/*!****************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoUserAttribute)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /** @class */ var CognitoUserAttribute = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoUserAttribute object\n   * @param {string=} Name The record's name\n   * @param {string=} Value The record's value\n   */ function CognitoUserAttribute(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, Name = _ref.Name, Value = _ref.Value;\n        this.Name = Name || \"\";\n        this.Value = Value || \"\";\n    }\n    /**\n   * @returns {string} the record's value.\n   */ var _proto = CognitoUserAttribute.prototype;\n    _proto.getValue = function getValue() {\n        return this.Value;\n    } /**\n   * Sets the record's value.\n   * @param {string} value The new value.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */ ;\n    _proto.setValue = function setValue(value) {\n        this.Value = value;\n        return this;\n    } /**\n   * @returns {string} the record's name.\n   */ ;\n    _proto.getName = function getName() {\n        return this.Name;\n    } /**\n   * Sets the record's name\n   * @param {string} name The new name.\n   * @returns {CognitoUserAttribute} The record for method chaining.\n   */ ;\n    _proto.setName = function setName(name) {\n        this.Name = name;\n        return this;\n    } /**\n   * @returns {string} a string representation of the record.\n   */ ;\n    _proto.toString = function toString() {\n        return JSON.stringify(this);\n    } /**\n   * @returns {object} a flat object representing the record.\n   */ ;\n    _proto.toJSON = function toJSON() {\n        return {\n            Name: this.Name,\n            Value: this.Value\n        };\n    };\n    return CognitoUserAttribute;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b1VzZXJBdHRyaWJ1dGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNELFdBQVcsR0FDWCxJQUFJQSx1QkFBdUIsV0FBVyxHQUFFO0lBQ3RDOzs7O0dBSUMsR0FDRCxTQUFTQSxxQkFBcUJDLEtBQUs7UUFDakMsSUFBSUMsT0FBT0QsVUFBVSxLQUFLLElBQUksQ0FBQyxJQUFJQSxPQUNqQ0UsT0FBT0QsS0FBS0MsSUFBSSxFQUNoQkMsUUFBUUYsS0FBS0UsS0FBSztRQUNwQixJQUFJLENBQUNELElBQUksR0FBR0EsUUFBUTtRQUNwQixJQUFJLENBQUNDLEtBQUssR0FBR0EsU0FBUztJQUN4QjtJQUVBOztHQUVDLEdBQ0QsSUFBSUMsU0FBU0wscUJBQXFCTSxTQUFTO0lBQzNDRCxPQUFPRSxRQUFRLEdBQUcsU0FBU0E7UUFDekIsT0FBTyxJQUFJLENBQUNILEtBQUs7SUFDbkIsRUFFQTs7OztHQUlDO0lBQ0RDLE9BQU9HLFFBQVEsR0FBRyxTQUFTQSxTQUFTQyxLQUFLO1FBQ3ZDLElBQUksQ0FBQ0wsS0FBSyxHQUFHSztRQUNiLE9BQU8sSUFBSTtJQUNiLEVBRUE7O0dBRUM7SUFDREosT0FBT0ssT0FBTyxHQUFHLFNBQVNBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDUCxJQUFJO0lBQ2xCLEVBRUE7Ozs7R0FJQztJQUNERSxPQUFPTSxPQUFPLEdBQUcsU0FBU0EsUUFBUUMsSUFBSTtRQUNwQyxJQUFJLENBQUNULElBQUksR0FBR1M7UUFDWixPQUFPLElBQUk7SUFDYixFQUVBOztHQUVDO0lBQ0RQLE9BQU9RLFFBQVEsR0FBRyxTQUFTQTtRQUN6QixPQUFPQyxLQUFLQyxTQUFTLENBQUMsSUFBSTtJQUM1QixFQUVBOztHQUVDO0lBQ0RWLE9BQU9XLE1BQU0sR0FBRyxTQUFTQTtRQUN2QixPQUFPO1lBQ0xiLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZDLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1FBQ25CO0lBQ0Y7SUFDQSxPQUFPSjtBQUNUO0FBQzJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0NvZ25pdG9Vc2VyQXR0cmlidXRlLmpzP2Q1NjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbi8qKiBAY2xhc3MgKi9cbnZhciBDb2duaXRvVXNlckF0dHJpYnV0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENvZ25pdG9Vc2VyQXR0cmlidXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IE5hbWUgVGhlIHJlY29yZCdzIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBWYWx1ZSBUaGUgcmVjb3JkJ3MgdmFsdWVcbiAgICovXG4gIGZ1bmN0aW9uIENvZ25pdG9Vc2VyQXR0cmlidXRlKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIE5hbWUgPSBfcmVmLk5hbWUsXG4gICAgICBWYWx1ZSA9IF9yZWYuVmFsdWU7XG4gICAgdGhpcy5OYW1lID0gTmFtZSB8fCAnJztcbiAgICB0aGlzLlZhbHVlID0gVmFsdWUgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIHJlY29yZCdzIHZhbHVlLlxuICAgKi9cbiAgdmFyIF9wcm90byA9IENvZ25pdG9Vc2VyQXR0cmlidXRlLnByb3RvdHlwZTtcbiAgX3Byb3RvLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcmVjb3JkJ3MgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgbmV3IHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Q29nbml0b1VzZXJBdHRyaWJ1dGV9IFRoZSByZWNvcmQgZm9yIG1ldGhvZCBjaGFpbmluZy5cbiAgICovO1xuICBfcHJvdG8uc2V0VmFsdWUgPSBmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuVmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgcmVjb3JkJ3MgbmFtZS5cbiAgICovO1xuICBfcHJvdG8uZ2V0TmFtZSA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZWNvcmQncyBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuZXcgbmFtZS5cbiAgICogQHJldHVybnMge0NvZ25pdG9Vc2VyQXR0cmlidXRlfSBUaGUgcmVjb3JkIGZvciBtZXRob2QgY2hhaW5pbmcuXG4gICAqLztcbiAgX3Byb3RvLnNldE5hbWUgPSBmdW5jdGlvbiBzZXROYW1lKG5hbWUpIHtcbiAgICB0aGlzLk5hbWUgPSBuYW1lO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWNvcmQuXG4gICAqLztcbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGEgZmxhdCBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWNvcmQuXG4gICAqLztcbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTmFtZTogdGhpcy5OYW1lLFxuICAgICAgVmFsdWU6IHRoaXMuVmFsdWVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQ29nbml0b1VzZXJBdHRyaWJ1dGU7XG59KCk7XG5leHBvcnQgeyBDb2duaXRvVXNlckF0dHJpYnV0ZSBhcyBkZWZhdWx0IH07Il0sIm5hbWVzIjpbIkNvZ25pdG9Vc2VyQXR0cmlidXRlIiwiX3RlbXAiLCJfcmVmIiwiTmFtZSIsIlZhbHVlIiwiX3Byb3RvIiwicHJvdG90eXBlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInZhbHVlIiwiZ2V0TmFtZSIsInNldE5hbWUiLCJuYW1lIiwidG9TdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwidG9KU09OIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js":
/*!***********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoUserPool)\n/* harmony export */ });\n/* harmony import */ var _Client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Client */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/Client.js\");\n/* harmony import */ var _CognitoUser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CognitoUser */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUser.js\");\n/* harmony import */ var _StorageHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/StorageHelper.js\");\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n\n\nvar USER_POOL_ID_MAX_LENGTH = 55;\n/** @class */ var CognitoUserPool = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoUserPool object\n   * @param {object} data Creation options.\n   * @param {string} data.UserPoolId Cognito user pool id.\n   * @param {string} data.ClientId User pool application client id.\n   * @param {string} data.endpoint Optional custom service endpoint.\n   * @param {object} data.fetchOptions Optional options for fetch API.\n   *        (only credentials option is supported)\n   * @param {object} data.Storage Optional storage object.\n   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:\n   *        boolean flag indicating if the data collection is enabled\n   *        to support cognito advanced security features. By default, this\n   *        flag is set to true.\n   */ function CognitoUserPool(data, wrapRefreshSessionCallback) {\n        var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;\n        if (!UserPoolId || !ClientId) {\n            throw new Error(\"Both UserPoolId and ClientId are required.\");\n        }\n        if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) {\n            throw new Error(\"Invalid UserPoolId format.\");\n        }\n        var region = UserPoolId.split(\"_\")[0];\n        this.userPoolId = UserPoolId;\n        this.clientId = ClientId;\n        this.client = new _Client__WEBPACK_IMPORTED_MODULE_0__[\"default\"](region, endpoint, fetchOptions);\n        /**\n     * By default, AdvancedSecurityDataCollectionFlag is set to true,\n     * if no input value is provided.\n     */ this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;\n        this.storage = data.Storage || new _StorageHelper__WEBPACK_IMPORTED_MODULE_2__[\"default\"]().getStorage();\n        if (wrapRefreshSessionCallback) {\n            this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;\n        }\n    }\n    /**\n   * @returns {string} the user pool id\n   */ var _proto = CognitoUserPool.prototype;\n    _proto.getUserPoolId = function getUserPoolId() {\n        return this.userPoolId;\n    } /**\n   * @returns {string} the user pool name\n   */ ;\n    _proto.getUserPoolName = function getUserPoolName() {\n        return this.getUserPoolId().split(\"_\")[1];\n    } /**\n   * @returns {string} the client id\n   */ ;\n    _proto.getClientId = function getClientId() {\n        return this.clientId;\n    } /**\n   * method for signing up a user\n   * @param {string} username User's username.\n   * @param {string} password Plain-text initial password entered by user.\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\n   * @param {(AttributeArg[])=} validationData Application metadata.\n   * @param {(AttributeArg[])=} clientMetadata Client metadata.\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */ ;\n    _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {\n        var _this = this;\n        var jsonReq = {\n            ClientId: this.clientId,\n            Username: username,\n            Password: password,\n            UserAttributes: userAttributes,\n            ValidationData: validationData,\n            ClientMetadata: clientMetadata\n        };\n        if (this.getUserContextData(username)) {\n            jsonReq.UserContextData = this.getUserContextData(username);\n        }\n        this.client.request(\"SignUp\", jsonReq, function(err, data) {\n            if (err) {\n                return callback(err, null);\n            }\n            var cognitoUser = {\n                Username: username,\n                Pool: _this,\n                Storage: _this.storage\n            };\n            var returnData = {\n                user: new _CognitoUser__WEBPACK_IMPORTED_MODULE_1__[\"default\"](cognitoUser),\n                userConfirmed: data.UserConfirmed,\n                userSub: data.UserSub,\n                codeDeliveryDetails: data.CodeDeliveryDetails\n            };\n            return callback(null, returnData);\n        });\n    } /**\n   * method for getting the current user of the application from the local storage\n   *\n   * @returns {CognitoUser} the user retrieved from storage\n   */ ;\n    _proto.getCurrentUser = function getCurrentUser() {\n        var lastUserKey = \"CognitoIdentityServiceProvider.\" + this.clientId + \".LastAuthUser\";\n        var lastAuthUser = this.storage.getItem(lastUserKey);\n        if (lastAuthUser) {\n            var cognitoUser = {\n                Username: lastAuthUser,\n                Pool: this,\n                Storage: this.storage\n            };\n            return new _CognitoUser__WEBPACK_IMPORTED_MODULE_1__[\"default\"](cognitoUser);\n        }\n        return null;\n    } /**\n   * This method returns the encoded data string used for cognito advanced security feature.\n   * This would be generated only when developer has included the JS used for collecting the\n   * data on their client. Please refer to documentation to know more about using AdvancedSecurity\n   * features\n   * @param {string} username the username for the context data\n   * @returns {string} the user context data\n   **/ ;\n    _proto.getUserContextData = function getUserContextData(username) {\n        if (typeof AmazonCognitoAdvancedSecurityData === \"undefined\") {\n            return undefined;\n        }\n        /* eslint-disable */ var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;\n        /* eslint-enable */ if (this.advancedSecurityDataCollectionFlag) {\n            var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);\n            if (advancedSecurityData) {\n                var userContextData = {\n                    EncodedData: advancedSecurityData\n                };\n                return userContextData;\n            }\n        }\n        return {};\n    };\n    return CognitoUserPool;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CognitoUserSession)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /** @class */ var CognitoUserSession = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CognitoUserSession object\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n   */ function CognitoUserSession(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;\n        if (AccessToken == null || IdToken == null) {\n            throw new Error(\"Id token and Access Token must be present.\");\n        }\n        this.idToken = IdToken;\n        this.refreshToken = RefreshToken;\n        this.accessToken = AccessToken;\n        this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n    }\n    /**\n   * @returns {CognitoIdToken} the session's Id token\n   */ var _proto = CognitoUserSession.prototype;\n    _proto.getIdToken = function getIdToken() {\n        return this.idToken;\n    } /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */ ;\n    _proto.getRefreshToken = function getRefreshToken() {\n        return this.refreshToken;\n    } /**\n   * @returns {CognitoAccessToken} the session's access token\n   */ ;\n    _proto.getAccessToken = function getAccessToken() {\n        return this.accessToken;\n    } /**\n   * @returns {int} the session's clock drift\n   */ ;\n    _proto.getClockDrift = function getClockDrift() {\n        return this.clockDrift;\n    } /**\n   * @returns {int} the computer's clock drift\n   */ ;\n    _proto.calculateClockDrift = function calculateClockDrift() {\n        var now = Math.floor(new Date() / 1000);\n        var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n        return now - iat;\n    } /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time (adjusted with clock drift)\n   * @returns {boolean} if the session is still valid\n   */ ;\n    _proto.isValid = function isValid() {\n        var now = Math.floor(new Date() / 1000);\n        var adjusted = now - this.clockDrift;\n        return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n    };\n    return CognitoUserSession;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29nbml0b1VzZXJTZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDRCxXQUFXLEdBQ1gsSUFBSUEscUJBQXFCLFdBQVcsR0FBRTtJQUNwQzs7Ozs7O0dBTUMsR0FDRCxTQUFTQSxtQkFBbUJDLEtBQUs7UUFDL0IsSUFBSUMsT0FBT0QsVUFBVSxLQUFLLElBQUksQ0FBQyxJQUFJQSxPQUNqQ0UsVUFBVUQsS0FBS0MsT0FBTyxFQUN0QkMsZUFBZUYsS0FBS0UsWUFBWSxFQUNoQ0MsY0FBY0gsS0FBS0csV0FBVyxFQUM5QkMsYUFBYUosS0FBS0ksVUFBVTtRQUM5QixJQUFJRCxlQUFlLFFBQVFGLFdBQVcsTUFBTTtZQUMxQyxNQUFNLElBQUlJLE1BQU07UUFDbEI7UUFDQSxJQUFJLENBQUNDLE9BQU8sR0FBR0w7UUFDZixJQUFJLENBQUNNLFlBQVksR0FBR0w7UUFDcEIsSUFBSSxDQUFDTSxXQUFXLEdBQUdMO1FBQ25CLElBQUksQ0FBQ00sVUFBVSxHQUFHTCxlQUFlTSxZQUFZLElBQUksQ0FBQ0MsbUJBQW1CLEtBQUtQO0lBQzVFO0lBRUE7O0dBRUMsR0FDRCxJQUFJUSxTQUFTZCxtQkFBbUJlLFNBQVM7SUFDekNELE9BQU9FLFVBQVUsR0FBRyxTQUFTQTtRQUMzQixPQUFPLElBQUksQ0FBQ1IsT0FBTztJQUNyQixFQUVBOztHQUVDO0lBQ0RNLE9BQU9HLGVBQWUsR0FBRyxTQUFTQTtRQUNoQyxPQUFPLElBQUksQ0FBQ1IsWUFBWTtJQUMxQixFQUVBOztHQUVDO0lBQ0RLLE9BQU9JLGNBQWMsR0FBRyxTQUFTQTtRQUMvQixPQUFPLElBQUksQ0FBQ1IsV0FBVztJQUN6QixFQUVBOztHQUVDO0lBQ0RJLE9BQU9LLGFBQWEsR0FBRyxTQUFTQTtRQUM5QixPQUFPLElBQUksQ0FBQ1IsVUFBVTtJQUN4QixFQUVBOztHQUVDO0lBQ0RHLE9BQU9ELG1CQUFtQixHQUFHLFNBQVNBO1FBQ3BDLElBQUlPLE1BQU1DLEtBQUtDLEtBQUssQ0FBQyxJQUFJQyxTQUFTO1FBQ2xDLElBQUlDLE1BQU1ILEtBQUtJLEdBQUcsQ0FBQyxJQUFJLENBQUNmLFdBQVcsQ0FBQ2dCLFdBQVcsSUFBSSxJQUFJLENBQUNsQixPQUFPLENBQUNrQixXQUFXO1FBQzNFLE9BQU9OLE1BQU1JO0lBQ2YsRUFFQTs7OztHQUlDO0lBQ0RWLE9BQU9hLE9BQU8sR0FBRyxTQUFTQTtRQUN4QixJQUFJUCxNQUFNQyxLQUFLQyxLQUFLLENBQUMsSUFBSUMsU0FBUztRQUNsQyxJQUFJSyxXQUFXUixNQUFNLElBQUksQ0FBQ1QsVUFBVTtRQUNwQyxPQUFPaUIsV0FBVyxJQUFJLENBQUNsQixXQUFXLENBQUNtQixhQUFhLE1BQU1ELFdBQVcsSUFBSSxDQUFDcEIsT0FBTyxDQUFDcUIsYUFBYTtJQUM3RjtJQUNBLE9BQU83QjtBQUNUO0FBQ3lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0NvZ25pdG9Vc2VyU2Vzc2lvbi5qcz8zMGJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG4vKiogQGNsYXNzICovXG52YXIgQ29nbml0b1VzZXJTZXNzaW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgQ29nbml0b1VzZXJTZXNzaW9uIG9iamVjdFxuICAgKiBAcGFyYW0ge0NvZ25pdG9JZFRva2VufSBJZFRva2VuIFRoZSBzZXNzaW9uJ3MgSWQgdG9rZW4uXG4gICAqIEBwYXJhbSB7Q29nbml0b1JlZnJlc2hUb2tlbj19IFJlZnJlc2hUb2tlbiBUaGUgc2Vzc2lvbidzIHJlZnJlc2ggdG9rZW4uXG4gICAqIEBwYXJhbSB7Q29nbml0b0FjY2Vzc1Rva2VufSBBY2Nlc3NUb2tlbiBUaGUgc2Vzc2lvbidzIGFjY2VzcyB0b2tlbi5cbiAgICogQHBhcmFtIHtpbnR9IENsb2NrRHJpZnQgVGhlIHNhdmVkIGNvbXB1dGVyJ3MgY2xvY2sgZHJpZnQgb3IgdW5kZWZpbmVkIHRvIGZvcmNlIGNhbGN1bGF0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gQ29nbml0b1VzZXJTZXNzaW9uKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIElkVG9rZW4gPSBfcmVmLklkVG9rZW4sXG4gICAgICBSZWZyZXNoVG9rZW4gPSBfcmVmLlJlZnJlc2hUb2tlbixcbiAgICAgIEFjY2Vzc1Rva2VuID0gX3JlZi5BY2Nlc3NUb2tlbixcbiAgICAgIENsb2NrRHJpZnQgPSBfcmVmLkNsb2NrRHJpZnQ7XG4gICAgaWYgKEFjY2Vzc1Rva2VuID09IG51bGwgfHwgSWRUb2tlbiA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lkIHRva2VuIGFuZCBBY2Nlc3MgVG9rZW4gbXVzdCBiZSBwcmVzZW50LicpO1xuICAgIH1cbiAgICB0aGlzLmlkVG9rZW4gPSBJZFRva2VuO1xuICAgIHRoaXMucmVmcmVzaFRva2VuID0gUmVmcmVzaFRva2VuO1xuICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBBY2Nlc3NUb2tlbjtcbiAgICB0aGlzLmNsb2NrRHJpZnQgPSBDbG9ja0RyaWZ0ID09PSB1bmRlZmluZWQgPyB0aGlzLmNhbGN1bGF0ZUNsb2NrRHJpZnQoKSA6IENsb2NrRHJpZnQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvZ25pdG9JZFRva2VufSB0aGUgc2Vzc2lvbidzIElkIHRva2VuXG4gICAqL1xuICB2YXIgX3Byb3RvID0gQ29nbml0b1VzZXJTZXNzaW9uLnByb3RvdHlwZTtcbiAgX3Byb3RvLmdldElkVG9rZW4gPSBmdW5jdGlvbiBnZXRJZFRva2VuKCkge1xuICAgIHJldHVybiB0aGlzLmlkVG9rZW47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvZ25pdG9SZWZyZXNoVG9rZW59IHRoZSBzZXNzaW9uJ3MgcmVmcmVzaCB0b2tlblxuICAgKi87XG4gIF9wcm90by5nZXRSZWZyZXNoVG9rZW4gPSBmdW5jdGlvbiBnZXRSZWZyZXNoVG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaFRva2VuO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtDb2duaXRvQWNjZXNzVG9rZW59IHRoZSBzZXNzaW9uJ3MgYWNjZXNzIHRva2VuXG4gICAqLztcbiAgX3Byb3RvLmdldEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjZXNzVG9rZW47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2ludH0gdGhlIHNlc3Npb24ncyBjbG9jayBkcmlmdFxuICAgKi87XG4gIF9wcm90by5nZXRDbG9ja0RyaWZ0ID0gZnVuY3Rpb24gZ2V0Q2xvY2tEcmlmdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9ja0RyaWZ0O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtpbnR9IHRoZSBjb21wdXRlcidzIGNsb2NrIGRyaWZ0XG4gICAqLztcbiAgX3Byb3RvLmNhbGN1bGF0ZUNsb2NrRHJpZnQgPSBmdW5jdGlvbiBjYWxjdWxhdGVDbG9ja0RyaWZ0KCkge1xuICAgIHZhciBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcbiAgICB2YXIgaWF0ID0gTWF0aC5taW4odGhpcy5hY2Nlc3NUb2tlbi5nZXRJc3N1ZWRBdCgpLCB0aGlzLmlkVG9rZW4uZ2V0SXNzdWVkQXQoKSk7XG4gICAgcmV0dXJuIG5vdyAtIGlhdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBzZXNzaW9uIGlzIHN0aWxsIHZhbGlkIGJhc2VkIG9uIHNlc3Npb24gZXhwaXJ5IGluZm9ybWF0aW9uIGZvdW5kXG4gICAqIGluIHRva2VucyBhbmQgdGhlIGN1cnJlbnQgdGltZSAoYWRqdXN0ZWQgd2l0aCBjbG9jayBkcmlmdClcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGlmIHRoZSBzZXNzaW9uIGlzIHN0aWxsIHZhbGlkXG4gICAqLztcbiAgX3Byb3RvLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgIHZhciBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkgLyAxMDAwKTtcbiAgICB2YXIgYWRqdXN0ZWQgPSBub3cgLSB0aGlzLmNsb2NrRHJpZnQ7XG4gICAgcmV0dXJuIGFkanVzdGVkIDwgdGhpcy5hY2Nlc3NUb2tlbi5nZXRFeHBpcmF0aW9uKCkgJiYgYWRqdXN0ZWQgPCB0aGlzLmlkVG9rZW4uZ2V0RXhwaXJhdGlvbigpO1xuICB9O1xuICByZXR1cm4gQ29nbml0b1VzZXJTZXNzaW9uO1xufSgpO1xuZXhwb3J0IHsgQ29nbml0b1VzZXJTZXNzaW9uIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiQ29nbml0b1VzZXJTZXNzaW9uIiwiX3RlbXAiLCJfcmVmIiwiSWRUb2tlbiIsIlJlZnJlc2hUb2tlbiIsIkFjY2Vzc1Rva2VuIiwiQ2xvY2tEcmlmdCIsIkVycm9yIiwiaWRUb2tlbiIsInJlZnJlc2hUb2tlbiIsImFjY2Vzc1Rva2VuIiwiY2xvY2tEcmlmdCIsInVuZGVmaW5lZCIsImNhbGN1bGF0ZUNsb2NrRHJpZnQiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJnZXRJZFRva2VuIiwiZ2V0UmVmcmVzaFRva2VuIiwiZ2V0QWNjZXNzVG9rZW4iLCJnZXRDbG9ja0RyaWZ0Iiwibm93IiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsImlhdCIsIm1pbiIsImdldElzc3VlZEF0IiwiaXNWYWxpZCIsImFkanVzdGVkIiwiZ2V0RXhwaXJhdGlvbiIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/CookieStorage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/CookieStorage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CookieStorage)\n/* harmony export */ });\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"(ssr)/./node_modules/js-cookie/src/js.cookie.js\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_0__);\n\n/** @class */ var CookieStorage = /*#__PURE__*/ function() {\n    /**\n   * Constructs a new CookieStorage object\n   * @param {object} data Creation options.\n   * @param {string} data.domain Cookies domain (default: domain of the page\n   * \t\t\t\twhere the cookie was created, excluding subdomains)\n   * @param {string} data.path Cookies path (default: '/')\n   * @param {integer} data.expires Cookie expiration (in days, default: 365)\n   * @param {boolean} data.secure Cookie secure flag (default: true)\n   * @param {string} data.sameSite Cookie request behavior (default: null)\n   */ function CookieStorage(data) {\n        if (data === void 0) {\n            data = {};\n        }\n        if (data.domain) {\n            this.domain = data.domain;\n        }\n        if (data.path) {\n            this.path = data.path;\n        } else {\n            this.path = \"/\";\n        }\n        if (Object.prototype.hasOwnProperty.call(data, \"expires\")) {\n            this.expires = data.expires;\n        } else {\n            this.expires = 365;\n        }\n        if (Object.prototype.hasOwnProperty.call(data, \"secure\")) {\n            this.secure = data.secure;\n        } else {\n            this.secure = true;\n        }\n        if (Object.prototype.hasOwnProperty.call(data, \"sameSite\")) {\n            if (![\n                \"strict\",\n                \"lax\",\n                \"none\"\n            ].includes(data.sameSite)) {\n                throw new Error('The sameSite value of cookieStorage must be \"lax\", \"strict\" or \"none\".');\n            }\n            if (data.sameSite === \"none\" && !this.secure) {\n                throw new Error(\"sameSite = None requires the Secure attribute in latest browser versions.\");\n            }\n            this.sameSite = data.sameSite;\n        } else {\n            this.sameSite = null;\n        }\n    }\n    /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */ var _proto = CookieStorage.prototype;\n    _proto.setItem = function setItem(key, value) {\n        var options = {\n            path: this.path,\n            expires: this.expires,\n            domain: this.domain,\n            secure: this.secure\n        };\n        if (this.sameSite) {\n            options.sameSite = this.sameSite;\n        }\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__.set(key, value, options);\n        return js_cookie__WEBPACK_IMPORTED_MODULE_0__.get(key);\n    } /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */ ;\n    _proto.getItem = function getItem(key) {\n        return js_cookie__WEBPACK_IMPORTED_MODULE_0__.get(key);\n    } /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {string} value - value that was deleted\n   */ ;\n    _proto.removeItem = function removeItem(key) {\n        var options = {\n            path: this.path,\n            expires: this.expires,\n            domain: this.domain,\n            secure: this.secure\n        };\n        if (this.sameSite) {\n            options.sameSite = this.sameSite;\n        }\n        return js_cookie__WEBPACK_IMPORTED_MODULE_0__.remove(key, options);\n    } /**\n   * This is used to clear the storage of optional\n   * items that were previously set\n   * @returns {} an empty object\n   */ ;\n    _proto.clear = function clear() {\n        var cookies = js_cookie__WEBPACK_IMPORTED_MODULE_0__.get();\n        var numKeys = Object.keys(cookies).length;\n        for(var index = 0; index < numKeys; ++index){\n            this.removeItem(Object.keys(cookies)[index]);\n        }\n        return {};\n    };\n    return CookieStorage;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvQ29va2llU3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFFckMsV0FBVyxHQUNYLElBQUlDLGdCQUFnQixXQUFXLEdBQUU7SUFDL0I7Ozs7Ozs7OztHQVNDLEdBQ0QsU0FBU0EsY0FBY0MsSUFBSTtRQUN6QixJQUFJQSxTQUFTLEtBQUssR0FBRztZQUNuQkEsT0FBTyxDQUFDO1FBQ1Y7UUFDQSxJQUFJQSxLQUFLQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUNBLE1BQU0sR0FBR0QsS0FBS0MsTUFBTTtRQUMzQjtRQUNBLElBQUlELEtBQUtFLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQ0EsSUFBSSxHQUFHRixLQUFLRSxJQUFJO1FBQ3ZCLE9BQU87WUFDTCxJQUFJLENBQUNBLElBQUksR0FBRztRQUNkO1FBQ0EsSUFBSUMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ04sTUFBTSxZQUFZO1lBQ3pELElBQUksQ0FBQ08sT0FBTyxHQUFHUCxLQUFLTyxPQUFPO1FBQzdCLE9BQU87WUFDTCxJQUFJLENBQUNBLE9BQU8sR0FBRztRQUNqQjtRQUNBLElBQUlKLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNOLE1BQU0sV0FBVztZQUN4RCxJQUFJLENBQUNRLE1BQU0sR0FBR1IsS0FBS1EsTUFBTTtRQUMzQixPQUFPO1lBQ0wsSUFBSSxDQUFDQSxNQUFNLEdBQUc7UUFDaEI7UUFDQSxJQUFJTCxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTixNQUFNLGFBQWE7WUFDMUQsSUFBSSxDQUFDO2dCQUFDO2dCQUFVO2dCQUFPO2FBQU8sQ0FBQ1MsUUFBUSxDQUFDVCxLQUFLVSxRQUFRLEdBQUc7Z0JBQ3RELE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLElBQUlYLEtBQUtVLFFBQVEsS0FBSyxVQUFVLENBQUMsSUFBSSxDQUFDRixNQUFNLEVBQUU7Z0JBQzVDLE1BQU0sSUFBSUcsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0QsUUFBUSxHQUFHVixLQUFLVSxRQUFRO1FBQy9CLE9BQU87WUFDTCxJQUFJLENBQUNBLFFBQVEsR0FBRztRQUNsQjtJQUNGO0lBRUE7Ozs7O0dBS0MsR0FDRCxJQUFJRSxTQUFTYixjQUFjSyxTQUFTO0lBQ3BDUSxPQUFPQyxPQUFPLEdBQUcsU0FBU0EsUUFBUUMsR0FBRyxFQUFFQyxLQUFLO1FBQzFDLElBQUlDLFVBQVU7WUFDWmQsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZkssU0FBUyxJQUFJLENBQUNBLE9BQU87WUFDckJOLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1lBQ25CTyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtRQUNyQjtRQUNBLElBQUksSUFBSSxDQUFDRSxRQUFRLEVBQUU7WUFDakJNLFFBQVFOLFFBQVEsR0FBRyxJQUFJLENBQUNBLFFBQVE7UUFDbEM7UUFDQVosMENBQVcsQ0FBQ2dCLEtBQUtDLE9BQU9DO1FBQ3hCLE9BQU9sQiwwQ0FBVyxDQUFDZ0I7SUFDckIsRUFFQTs7Ozs7R0FLQztJQUNERixPQUFPTyxPQUFPLEdBQUcsU0FBU0EsUUFBUUwsR0FBRztRQUNuQyxPQUFPaEIsMENBQVcsQ0FBQ2dCO0lBQ3JCLEVBRUE7Ozs7R0FJQztJQUNERixPQUFPUSxVQUFVLEdBQUcsU0FBU0EsV0FBV04sR0FBRztRQUN6QyxJQUFJRSxVQUFVO1lBQ1pkLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZLLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCTixRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQk8sUUFBUSxJQUFJLENBQUNBLE1BQU07UUFDckI7UUFDQSxJQUFJLElBQUksQ0FBQ0UsUUFBUSxFQUFFO1lBQ2pCTSxRQUFRTixRQUFRLEdBQUcsSUFBSSxDQUFDQSxRQUFRO1FBQ2xDO1FBQ0EsT0FBT1osNkNBQWMsQ0FBQ2dCLEtBQUtFO0lBQzdCLEVBRUE7Ozs7R0FJQztJQUNESixPQUFPVSxLQUFLLEdBQUcsU0FBU0E7UUFDdEIsSUFBSUMsVUFBVXpCLDBDQUFXO1FBQ3pCLElBQUkwQixVQUFVckIsT0FBT3NCLElBQUksQ0FBQ0YsU0FBU0csTUFBTTtRQUN6QyxJQUFLLElBQUlDLFFBQVEsR0FBR0EsUUFBUUgsU0FBUyxFQUFFRyxNQUFPO1lBQzVDLElBQUksQ0FBQ1AsVUFBVSxDQUFDakIsT0FBT3NCLElBQUksQ0FBQ0YsUUFBUSxDQUFDSSxNQUFNO1FBQzdDO1FBQ0EsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxPQUFPNUI7QUFDVDtBQUNvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy9Db29raWVTdG9yYWdlLmpzPzNiZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQ29va2llcyBmcm9tICdqcy1jb29raWUnO1xuXG4vKiogQGNsYXNzICovXG52YXIgQ29va2llU3RvcmFnZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENvb2tpZVN0b3JhZ2Ugb2JqZWN0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIENyZWF0aW9uIG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLmRvbWFpbiBDb29raWVzIGRvbWFpbiAoZGVmYXVsdDogZG9tYWluIG9mIHRoZSBwYWdlXG4gICAqIFx0XHRcdFx0d2hlcmUgdGhlIGNvb2tpZSB3YXMgY3JlYXRlZCwgZXhjbHVkaW5nIHN1YmRvbWFpbnMpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLnBhdGggQ29va2llcyBwYXRoIChkZWZhdWx0OiAnLycpXG4gICAqIEBwYXJhbSB7aW50ZWdlcn0gZGF0YS5leHBpcmVzIENvb2tpZSBleHBpcmF0aW9uIChpbiBkYXlzLCBkZWZhdWx0OiAzNjUpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGF0YS5zZWN1cmUgQ29va2llIHNlY3VyZSBmbGFnIChkZWZhdWx0OiB0cnVlKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5zYW1lU2l0ZSBDb29raWUgcmVxdWVzdCBiZWhhdmlvciAoZGVmYXVsdDogbnVsbClcbiAgICovXG4gIGZ1bmN0aW9uIENvb2tpZVN0b3JhZ2UoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB2b2lkIDApIHtcbiAgICAgIGRhdGEgPSB7fTtcbiAgICB9XG4gICAgaWYgKGRhdGEuZG9tYWluKSB7XG4gICAgICB0aGlzLmRvbWFpbiA9IGRhdGEuZG9tYWluO1xuICAgIH1cbiAgICBpZiAoZGF0YS5wYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBkYXRhLnBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF0aCA9ICcvJztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCAnZXhwaXJlcycpKSB7XG4gICAgICB0aGlzLmV4cGlyZXMgPSBkYXRhLmV4cGlyZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhwaXJlcyA9IDM2NTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCAnc2VjdXJlJykpIHtcbiAgICAgIHRoaXMuc2VjdXJlID0gZGF0YS5zZWN1cmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VjdXJlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCAnc2FtZVNpdGUnKSkge1xuICAgICAgaWYgKCFbJ3N0cmljdCcsICdsYXgnLCAnbm9uZSddLmluY2x1ZGVzKGRhdGEuc2FtZVNpdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNhbWVTaXRlIHZhbHVlIG9mIGNvb2tpZVN0b3JhZ2UgbXVzdCBiZSBcImxheFwiLCBcInN0cmljdFwiIG9yIFwibm9uZVwiLicpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuc2FtZVNpdGUgPT09ICdub25lJyAmJiAhdGhpcy5zZWN1cmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzYW1lU2l0ZSA9IE5vbmUgcmVxdWlyZXMgdGhlIFNlY3VyZSBhdHRyaWJ1dGUgaW4gbGF0ZXN0IGJyb3dzZXIgdmVyc2lvbnMuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnNhbWVTaXRlID0gZGF0YS5zYW1lU2l0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zYW1lU2l0ZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byBzZXQgYSBzcGVjaWZpYyBpdGVtIGluIHN0b3JhZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHRoZSBrZXkgZm9yIHRoZSBpdGVtXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZSAtIHRoZSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSB0aGF0IHdhcyBzZXRcbiAgICovXG4gIHZhciBfcHJvdG8gPSBDb29raWVTdG9yYWdlLnByb3RvdHlwZTtcbiAgX3Byb3RvLnNldEl0ZW0gPSBmdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IHRoaXMucGF0aCxcbiAgICAgIGV4cGlyZXM6IHRoaXMuZXhwaXJlcyxcbiAgICAgIGRvbWFpbjogdGhpcy5kb21haW4sXG4gICAgICBzZWN1cmU6IHRoaXMuc2VjdXJlXG4gICAgfTtcbiAgICBpZiAodGhpcy5zYW1lU2l0ZSkge1xuICAgICAgb3B0aW9ucy5zYW1lU2l0ZSA9IHRoaXMuc2FtZVNpdGU7XG4gICAgfVxuICAgIENvb2tpZXMuc2V0KGtleSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgIHJldHVybiBDb29raWVzLmdldChrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byBnZXQgYSBzcGVjaWZpYyBrZXkgZnJvbSBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUga2V5IGZvciB0aGUgaXRlbVxuICAgKiBUaGlzIGlzIHVzZWQgdG8gY2xlYXIgdGhlIHN0b3JhZ2VcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGRhdGEgaXRlbVxuICAgKi87XG4gIF9wcm90by5nZXRJdGVtID0gZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICByZXR1cm4gQ29va2llcy5nZXQoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gcmVtb3ZlIGFuIGl0ZW0gZnJvbSBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUga2V5IGJlaW5nIHNldFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB2YWx1ZSAtIHZhbHVlIHRoYXQgd2FzIGRlbGV0ZWRcbiAgICovO1xuICBfcHJvdG8ucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiB0aGlzLnBhdGgsXG4gICAgICBleHBpcmVzOiB0aGlzLmV4cGlyZXMsXG4gICAgICBkb21haW46IHRoaXMuZG9tYWluLFxuICAgICAgc2VjdXJlOiB0aGlzLnNlY3VyZVxuICAgIH07XG4gICAgaWYgKHRoaXMuc2FtZVNpdGUpIHtcbiAgICAgIG9wdGlvbnMuc2FtZVNpdGUgPSB0aGlzLnNhbWVTaXRlO1xuICAgIH1cbiAgICByZXR1cm4gQ29va2llcy5yZW1vdmUoa2V5LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gY2xlYXIgdGhlIHN0b3JhZ2Ugb2Ygb3B0aW9uYWxcbiAgICogaXRlbXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgc2V0XG4gICAqIEByZXR1cm5zIHt9IGFuIGVtcHR5IG9iamVjdFxuICAgKi87XG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHZhciBjb29raWVzID0gQ29va2llcy5nZXQoKTtcbiAgICB2YXIgbnVtS2V5cyA9IE9iamVjdC5rZXlzKGNvb2tpZXMpLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbnVtS2V5czsgKytpbmRleCkge1xuICAgICAgdGhpcy5yZW1vdmVJdGVtKE9iamVjdC5rZXlzKGNvb2tpZXMpW2luZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbiAgfTtcbiAgcmV0dXJuIENvb2tpZVN0b3JhZ2U7XG59KCk7XG5leHBvcnQgeyBDb29raWVTdG9yYWdlIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiQ29va2llcyIsIkNvb2tpZVN0b3JhZ2UiLCJkYXRhIiwiZG9tYWluIiwicGF0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImV4cGlyZXMiLCJzZWN1cmUiLCJpbmNsdWRlcyIsInNhbWVTaXRlIiwiRXJyb3IiLCJfcHJvdG8iLCJzZXRJdGVtIiwia2V5IiwidmFsdWUiLCJvcHRpb25zIiwic2V0IiwiZ2V0IiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJyZW1vdmUiLCJjbGVhciIsImNvb2tpZXMiLCJudW1LZXlzIiwia2V5cyIsImxlbmd0aCIsImluZGV4IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/CookieStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/DateHelper.js":
/*!******************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/DateHelper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DateHelper)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ var monthNames = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nvar weekNames = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\"\n];\n/** @class */ var DateHelper = /*#__PURE__*/ function() {\n    function DateHelper() {}\n    var _proto = DateHelper.prototype;\n    /**\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\n   */ _proto.getNowString = function getNowString() {\n        var now = new Date();\n        var weekDay = weekNames[now.getUTCDay()];\n        var month = monthNames[now.getUTCMonth()];\n        var day = now.getUTCDate();\n        var hours = now.getUTCHours();\n        if (hours < 10) {\n            hours = \"0\" + hours;\n        }\n        var minutes = now.getUTCMinutes();\n        if (minutes < 10) {\n            minutes = \"0\" + minutes;\n        }\n        var seconds = now.getUTCSeconds();\n        if (seconds < 10) {\n            seconds = \"0\" + seconds;\n        }\n        var year = now.getUTCFullYear();\n        // ddd MMM D HH:mm:ss UTC YYYY\n        var dateNow = weekDay + \" \" + month + \" \" + day + \" \" + hours + \":\" + minutes + \":\" + seconds + \" UTC \" + year;\n        return dateNow;\n    };\n    return DateHelper;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvRGF0ZUhlbHBlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBRUQsSUFBSUEsYUFBYTtJQUFDO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztDQUFNO0FBQ3JHLElBQUlDLFlBQVk7SUFBQztJQUFPO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztDQUFNO0FBRWpFLFdBQVcsR0FDWCxJQUFJQyxhQUFhLFdBQVcsR0FBRTtJQUM1QixTQUFTQSxjQUFjO0lBQ3ZCLElBQUlDLFNBQVNELFdBQVdFLFNBQVM7SUFDakM7O0dBRUMsR0FDREQsT0FBT0UsWUFBWSxHQUFHLFNBQVNBO1FBQzdCLElBQUlDLE1BQU0sSUFBSUM7UUFDZCxJQUFJQyxVQUFVUCxTQUFTLENBQUNLLElBQUlHLFNBQVMsR0FBRztRQUN4QyxJQUFJQyxRQUFRVixVQUFVLENBQUNNLElBQUlLLFdBQVcsR0FBRztRQUN6QyxJQUFJQyxNQUFNTixJQUFJTyxVQUFVO1FBQ3hCLElBQUlDLFFBQVFSLElBQUlTLFdBQVc7UUFDM0IsSUFBSUQsUUFBUSxJQUFJO1lBQ2RBLFFBQVEsTUFBTUE7UUFDaEI7UUFDQSxJQUFJRSxVQUFVVixJQUFJVyxhQUFhO1FBQy9CLElBQUlELFVBQVUsSUFBSTtZQUNoQkEsVUFBVSxNQUFNQTtRQUNsQjtRQUNBLElBQUlFLFVBQVVaLElBQUlhLGFBQWE7UUFDL0IsSUFBSUQsVUFBVSxJQUFJO1lBQ2hCQSxVQUFVLE1BQU1BO1FBQ2xCO1FBQ0EsSUFBSUUsT0FBT2QsSUFBSWUsY0FBYztRQUU3Qiw4QkFBOEI7UUFDOUIsSUFBSUMsVUFBVWQsVUFBVSxNQUFNRSxRQUFRLE1BQU1FLE1BQU0sTUFBTUUsUUFBUSxNQUFNRSxVQUFVLE1BQU1FLFVBQVUsVUFBVUU7UUFDMUcsT0FBT0U7SUFDVDtJQUNBLE9BQU9wQjtBQUNUO0FBQ2lDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL0RhdGVIZWxwZXIuanM/MWYwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG52YXIgbW9udGhOYW1lcyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXTtcbnZhciB3ZWVrTmFtZXMgPSBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddO1xuXG4vKiogQGNsYXNzICovXG52YXIgRGF0ZUhlbHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERhdGVIZWxwZXIoKSB7fVxuICB2YXIgX3Byb3RvID0gRGF0ZUhlbHBlci5wcm90b3R5cGU7XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCB0aW1lIGluIFwiZGRkIE1NTSBEIEhIOm1tOnNzIFVUQyBZWVlZXCIgZm9ybWF0LlxuICAgKi9cbiAgX3Byb3RvLmdldE5vd1N0cmluZyA9IGZ1bmN0aW9uIGdldE5vd1N0cmluZygpIHtcbiAgICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgICB2YXIgd2Vla0RheSA9IHdlZWtOYW1lc1tub3cuZ2V0VVRDRGF5KCldO1xuICAgIHZhciBtb250aCA9IG1vbnRoTmFtZXNbbm93LmdldFVUQ01vbnRoKCldO1xuICAgIHZhciBkYXkgPSBub3cuZ2V0VVRDRGF0ZSgpO1xuICAgIHZhciBob3VycyA9IG5vdy5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA8IDEwKSB7XG4gICAgICBob3VycyA9IFwiMFwiICsgaG91cnM7XG4gICAgfVxuICAgIHZhciBtaW51dGVzID0gbm93LmdldFVUQ01pbnV0ZXMoKTtcbiAgICBpZiAobWludXRlcyA8IDEwKSB7XG4gICAgICBtaW51dGVzID0gXCIwXCIgKyBtaW51dGVzO1xuICAgIH1cbiAgICB2YXIgc2Vjb25kcyA9IG5vdy5nZXRVVENTZWNvbmRzKCk7XG4gICAgaWYgKHNlY29uZHMgPCAxMCkge1xuICAgICAgc2Vjb25kcyA9IFwiMFwiICsgc2Vjb25kcztcbiAgICB9XG4gICAgdmFyIHllYXIgPSBub3cuZ2V0VVRDRnVsbFllYXIoKTtcblxuICAgIC8vIGRkZCBNTU0gRCBISDptbTpzcyBVVEMgWVlZWVxuICAgIHZhciBkYXRlTm93ID0gd2Vla0RheSArIFwiIFwiICsgbW9udGggKyBcIiBcIiArIGRheSArIFwiIFwiICsgaG91cnMgKyBcIjpcIiArIG1pbnV0ZXMgKyBcIjpcIiArIHNlY29uZHMgKyBcIiBVVEMgXCIgKyB5ZWFyO1xuICAgIHJldHVybiBkYXRlTm93O1xuICB9O1xuICByZXR1cm4gRGF0ZUhlbHBlcjtcbn0oKTtcbmV4cG9ydCB7IERhdGVIZWxwZXIgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJtb250aE5hbWVzIiwid2Vla05hbWVzIiwiRGF0ZUhlbHBlciIsIl9wcm90byIsInByb3RvdHlwZSIsImdldE5vd1N0cmluZyIsIm5vdyIsIkRhdGUiLCJ3ZWVrRGF5IiwiZ2V0VVRDRGF5IiwibW9udGgiLCJnZXRVVENNb250aCIsImRheSIsImdldFVUQ0RhdGUiLCJob3VycyIsImdldFVUQ0hvdXJzIiwibWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImRhdGVOb3ciLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/DateHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/Platform/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CATEGORY: () => (/* binding */ AUTH_CATEGORY),\n/* harmony export */   FRAMEWORK: () => (/* binding */ FRAMEWORK)\n/* harmony export */ });\nvar FRAMEWORK = {\n    None: \"0\",\n    ReactNative: \"1\"\n};\nvar AUTH_CATEGORY = \"auth\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvUGxhdGZvcm0vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sSUFBSUEsWUFBWTtJQUNyQkMsTUFBTTtJQUNOQyxhQUFhO0FBQ2YsRUFBRTtBQUNLLElBQUlDLGdCQUFnQixPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL1BsYXRmb3JtL2NvbnN0YW50cy5qcz85NWJlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgRlJBTUVXT1JLID0ge1xuICBOb25lOiAnMCcsXG4gIFJlYWN0TmF0aXZlOiAnMSdcbn07XG5leHBvcnQgdmFyIEFVVEhfQ0FURUdPUlkgPSAnYXV0aCc7Il0sIm5hbWVzIjpbIkZSQU1FV09SSyIsIk5vbmUiLCJSZWFjdE5hdGl2ZSIsIkFVVEhfQ0FURUdPUlkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/Platform/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Platform: () => (/* binding */ Platform),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getUserAgent: () => (/* binding */ getUserAgent)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/version.js\");\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar BASE_USER_AGENT = \"aws-amplify/\" + _version__WEBPACK_IMPORTED_MODULE_0__.version;\nvar Platform = {\n    userAgent: BASE_USER_AGENT,\n    isReactNative: typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\"\n};\nvar getUserAgent = function getUserAgent() {\n    return Platform.userAgent;\n};\n/**\n * @deprecated use named import\n */ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Platform);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvUGxhdGZvcm0vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Q0FHQyxHQUNtQztBQUNwQyxJQUFJQyxrQkFBa0IsaUJBQWlCRCw2Q0FBT0E7QUFDdkMsSUFBSUUsV0FBVztJQUNwQkMsV0FBV0Y7SUFDWEcsZUFBZSxPQUFPQyxjQUFjLGVBQWVBLFVBQVVDLE9BQU8sS0FBSztBQUMzRSxFQUFFO0FBQ0ssSUFBSUMsZUFBZSxTQUFTQTtJQUNqQyxPQUFPTCxTQUFTQyxTQUFTO0FBQzNCLEVBQUU7QUFFRjs7Q0FFQyxHQUNELGlFQUFlRCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL1BsYXRmb3JtL2luZGV4LmpzP2IxODAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nO1xudmFyIEJBU0VfVVNFUl9BR0VOVCA9IFwiYXdzLWFtcGxpZnkvXCIgKyB2ZXJzaW9uO1xuZXhwb3J0IHZhciBQbGF0Zm9ybSA9IHtcbiAgdXNlckFnZW50OiBCQVNFX1VTRVJfQUdFTlQsXG4gIGlzUmVhY3ROYXRpdmU6IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnXG59O1xuZXhwb3J0IHZhciBnZXRVc2VyQWdlbnQgPSBmdW5jdGlvbiBnZXRVc2VyQWdlbnQoKSB7XG4gIHJldHVybiBQbGF0Zm9ybS51c2VyQWdlbnQ7XG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBuYW1lZCBpbXBvcnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgUGxhdGZvcm07Il0sIm5hbWVzIjpbInZlcnNpb24iLCJCQVNFX1VTRVJfQUdFTlQiLCJQbGF0Zm9ybSIsInVzZXJBZ2VudCIsImlzUmVhY3ROYXRpdmUiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZ2V0VXNlckFnZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/version.js":
/*!************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/Platform/version.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// generated by genversion\nvar version = \"5.0.4\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvUGxhdGZvcm0vdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMEJBQTBCO0FBQ25CLElBQUlBLFVBQVUsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy9QbGF0Zm9ybS92ZXJzaW9uLmpzPzUwODQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2VuZXJhdGVkIGJ5IGdlbnZlcnNpb25cbmV4cG9ydCB2YXIgdmVyc2lvbiA9ICc1LjAuNCc7Il0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/StorageHelper.js":
/*!*********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/StorageHelper.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage),\n/* harmony export */   \"default\": () => (/* binding */ StorageHelper)\n/* harmony export */ });\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ var dataMemory = {};\n/** @class */ var MemoryStorage = /*#__PURE__*/ function() {\n    function MemoryStorage() {}\n    /**\n   * This is used to set a specific item in storage\n   * @param {string} key - the key for the item\n   * @param {object} value - the value\n   * @returns {string} value that was set\n   */ MemoryStorage.setItem = function setItem(key, value) {\n        dataMemory[key] = value;\n        return dataMemory[key];\n    } /**\n   * This is used to get a specific key from storage\n   * @param {string} key - the key for the item\n   * This is used to clear the storage\n   * @returns {string} the data item\n   */ ;\n    MemoryStorage.getItem = function getItem(key) {\n        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;\n    } /**\n   * This is used to remove an item from storage\n   * @param {string} key - the key being set\n   * @returns {boolean} return true\n   */ ;\n    MemoryStorage.removeItem = function removeItem(key) {\n        return delete dataMemory[key];\n    } /**\n   * This is used to clear the storage\n   * @returns {string} nothing\n   */ ;\n    MemoryStorage.clear = function clear() {\n        dataMemory = {};\n        return dataMemory;\n    };\n    return MemoryStorage;\n}();\n/** @class */ var StorageHelper = /*#__PURE__*/ function() {\n    /**\n   * This is used to get a storage object\n   * @returns {object} the storage\n   */ function StorageHelper() {\n        try {\n            this.storageWindow = window.localStorage;\n            this.storageWindow.setItem(\"aws.cognito.test-ls\", 1);\n            this.storageWindow.removeItem(\"aws.cognito.test-ls\");\n        } catch (exception) {\n            this.storageWindow = MemoryStorage;\n        }\n    }\n    /**\n   * This is used to return the storage\n   * @returns {object} the storage\n   */ var _proto = StorageHelper.prototype;\n    _proto.getStorage = function getStorage() {\n        return this.storageWindow;\n    };\n    return StorageHelper;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvU3RvcmFnZUhlbHBlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUVELElBQUlBLGFBQWEsQ0FBQztBQUVsQixXQUFXLEdBQ0osSUFBSUMsZ0JBQWdCLFdBQVcsR0FBRTtJQUN0QyxTQUFTQSxpQkFBaUI7SUFDMUI7Ozs7O0dBS0MsR0FDREEsY0FBY0MsT0FBTyxHQUFHLFNBQVNBLFFBQVFDLEdBQUcsRUFBRUMsS0FBSztRQUNqREosVUFBVSxDQUFDRyxJQUFJLEdBQUdDO1FBQ2xCLE9BQU9KLFVBQVUsQ0FBQ0csSUFBSTtJQUN4QixFQUVBOzs7OztHQUtDO0lBQ0RGLGNBQWNJLE9BQU8sR0FBRyxTQUFTQSxRQUFRRixHQUFHO1FBQzFDLE9BQU9HLE9BQU9DLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNULFlBQVlHLE9BQU9ILFVBQVUsQ0FBQ0csSUFBSSxHQUFHTztJQUNuRixFQUVBOzs7O0dBSUM7SUFDRFQsY0FBY1UsVUFBVSxHQUFHLFNBQVNBLFdBQVdSLEdBQUc7UUFDaEQsT0FBTyxPQUFPSCxVQUFVLENBQUNHLElBQUk7SUFDL0IsRUFFQTs7O0dBR0M7SUFDREYsY0FBY1csS0FBSyxHQUFHLFNBQVNBO1FBQzdCWixhQUFhLENBQUM7UUFDZCxPQUFPQTtJQUNUO0lBQ0EsT0FBT0M7QUFDVCxJQUFJO0FBRUosV0FBVyxHQUNYLElBQUlZLGdCQUFnQixXQUFXLEdBQUU7SUFDL0I7OztHQUdDLEdBQ0QsU0FBU0E7UUFDUCxJQUFJO1lBQ0YsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLE9BQU9DLFlBQVk7WUFDeEMsSUFBSSxDQUFDRixhQUFhLENBQUNaLE9BQU8sQ0FBQyx1QkFBdUI7WUFDbEQsSUFBSSxDQUFDWSxhQUFhLENBQUNILFVBQVUsQ0FBQztRQUNoQyxFQUFFLE9BQU9NLFdBQVc7WUFDbEIsSUFBSSxDQUFDSCxhQUFhLEdBQUdiO1FBQ3ZCO0lBQ0Y7SUFFQTs7O0dBR0MsR0FDRCxJQUFJaUIsU0FBU0wsY0FBY04sU0FBUztJQUNwQ1csT0FBT0MsVUFBVSxHQUFHLFNBQVNBO1FBQzNCLE9BQU8sSUFBSSxDQUFDTCxhQUFhO0lBQzNCO0lBQ0EsT0FBT0Q7QUFDVDtBQUNvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy9TdG9yYWdlSGVscGVyLmpzPzEyNjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxudmFyIGRhdGFNZW1vcnkgPSB7fTtcblxuLyoqIEBjbGFzcyAqL1xuZXhwb3J0IHZhciBNZW1vcnlTdG9yYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWVtb3J5U3RvcmFnZSgpIHt9XG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gc2V0IGEgc3BlY2lmaWMgaXRlbSBpbiBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUga2V5IGZvciB0aGUgaXRlbVxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWUgLSB0aGUgdmFsdWVcbiAgICogQHJldHVybnMge3N0cmluZ30gdmFsdWUgdGhhdCB3YXMgc2V0XG4gICAqL1xuICBNZW1vcnlTdG9yYWdlLnNldEl0ZW0gPSBmdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICBkYXRhTWVtb3J5W2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gZGF0YU1lbW9yeVtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byBnZXQgYSBzcGVjaWZpYyBrZXkgZnJvbSBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSB0aGUga2V5IGZvciB0aGUgaXRlbVxuICAgKiBUaGlzIGlzIHVzZWQgdG8gY2xlYXIgdGhlIHN0b3JhZ2VcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGRhdGEgaXRlbVxuICAgKi87XG4gIE1lbW9yeVN0b3JhZ2UuZ2V0SXRlbSA9IGZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhTWVtb3J5LCBrZXkpID8gZGF0YU1lbW9yeVtrZXldIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdXNlZCB0byByZW1vdmUgYW4gaXRlbSBmcm9tIHN0b3JhZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHRoZSBrZXkgYmVpbmcgc2V0XG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZVxuICAgKi87XG4gIE1lbW9yeVN0b3JhZ2UucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBkYXRhTWVtb3J5W2tleV07XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB1c2VkIHRvIGNsZWFyIHRoZSBzdG9yYWdlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IG5vdGhpbmdcbiAgICovO1xuICBNZW1vcnlTdG9yYWdlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgZGF0YU1lbW9yeSA9IHt9O1xuICAgIHJldHVybiBkYXRhTWVtb3J5O1xuICB9O1xuICByZXR1cm4gTWVtb3J5U3RvcmFnZTtcbn0oKTtcblxuLyoqIEBjbGFzcyAqL1xudmFyIFN0b3JhZ2VIZWxwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogVGhpcyBpcyB1c2VkIHRvIGdldCBhIHN0b3JhZ2Ugb2JqZWN0XG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBzdG9yYWdlXG4gICAqL1xuICBmdW5jdGlvbiBTdG9yYWdlSGVscGVyKCkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnN0b3JhZ2VXaW5kb3cgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgdGhpcy5zdG9yYWdlV2luZG93LnNldEl0ZW0oJ2F3cy5jb2duaXRvLnRlc3QtbHMnLCAxKTtcbiAgICAgIHRoaXMuc3RvcmFnZVdpbmRvdy5yZW1vdmVJdGVtKCdhd3MuY29nbml0by50ZXN0LWxzJyk7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICB0aGlzLnN0b3JhZ2VXaW5kb3cgPSBNZW1vcnlTdG9yYWdlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gcmV0dXJuIHRoZSBzdG9yYWdlXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBzdG9yYWdlXG4gICAqL1xuICB2YXIgX3Byb3RvID0gU3RvcmFnZUhlbHBlci5wcm90b3R5cGU7XG4gIF9wcm90by5nZXRTdG9yYWdlID0gZnVuY3Rpb24gZ2V0U3RvcmFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlV2luZG93O1xuICB9O1xuICByZXR1cm4gU3RvcmFnZUhlbHBlcjtcbn0oKTtcbmV4cG9ydCB7IFN0b3JhZ2VIZWxwZXIgYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJkYXRhTWVtb3J5IiwiTWVtb3J5U3RvcmFnZSIsInNldEl0ZW0iLCJrZXkiLCJ2YWx1ZSIsImdldEl0ZW0iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ1bmRlZmluZWQiLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJTdG9yYWdlSGVscGVyIiwic3RvcmFnZVdpbmRvdyIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImV4Y2VwdGlvbiIsIl9wcm90byIsImdldFN0b3JhZ2UiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/StorageHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/UserAgent.js":
/*!*****************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/UserAgent.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAuthCategoryToCognitoUserAgent: () => (/* binding */ addAuthCategoryToCognitoUserAgent),\n/* harmony export */   addFrameworkToCognitoUserAgent: () => (/* binding */ addFrameworkToCognitoUserAgent),\n/* harmony export */   appendToCognitoUserAgent: () => (/* binding */ appendToCognitoUserAgent),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAmplifyUserAgent: () => (/* binding */ getAmplifyUserAgent)\n/* harmony export */ });\n/* harmony import */ var _Platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Platform */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/index.js\");\n/* harmony import */ var _Platform_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Platform/constants */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/Platform/constants.js\");\n\n\n// constructor\nfunction UserAgent() {}\n// public\nUserAgent.prototype.userAgent = (0,_Platform__WEBPACK_IMPORTED_MODULE_0__.getUserAgent)();\nvar appendToCognitoUserAgent = function appendToCognitoUserAgent(content) {\n    if (!content) {\n        return;\n    }\n    if (UserAgent.prototype.userAgent && !UserAgent.prototype.userAgent.includes(content)) {\n        UserAgent.prototype.userAgent = UserAgent.prototype.userAgent.concat(\" \", content);\n    }\n    if (!UserAgent.prototype.userAgent || UserAgent.prototype.userAgent === \"\") {\n        UserAgent.prototype.userAgent = content;\n    }\n};\nvar addAuthCategoryToCognitoUserAgent = function addAuthCategoryToCognitoUserAgent() {\n    UserAgent.category = _Platform_constants__WEBPACK_IMPORTED_MODULE_1__.AUTH_CATEGORY;\n};\nvar addFrameworkToCognitoUserAgent = function addFrameworkToCognitoUserAgent(framework) {\n    UserAgent.framework = framework;\n};\nvar getAmplifyUserAgent = function getAmplifyUserAgent(action) {\n    var uaCategoryAction = UserAgent.category ? \" \" + UserAgent.category : \"\";\n    var uaFramework = UserAgent.framework ? \" framework/\" + UserAgent.framework : \"\";\n    var userAgent = \"\" + UserAgent.prototype.userAgent + uaCategoryAction + uaFramework;\n    return userAgent;\n};\n// class for defining the amzn user-agent\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserAgent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvVXNlckFnZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMEM7QUFDVztBQUVyRCxjQUFjO0FBQ2QsU0FBU0UsYUFBYTtBQUN0QixTQUFTO0FBQ1RBLFVBQVVDLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHSix1REFBWUE7QUFDckMsSUFBSUssMkJBQTJCLFNBQVNBLHlCQUF5QkMsT0FBTztJQUM3RSxJQUFJLENBQUNBLFNBQVM7UUFDWjtJQUNGO0lBQ0EsSUFBSUosVUFBVUMsU0FBUyxDQUFDQyxTQUFTLElBQUksQ0FBQ0YsVUFBVUMsU0FBUyxDQUFDQyxTQUFTLENBQUNHLFFBQVEsQ0FBQ0QsVUFBVTtRQUNyRkosVUFBVUMsU0FBUyxDQUFDQyxTQUFTLEdBQUdGLFVBQVVDLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDSSxNQUFNLENBQUMsS0FBS0Y7SUFDNUU7SUFDQSxJQUFJLENBQUNKLFVBQVVDLFNBQVMsQ0FBQ0MsU0FBUyxJQUFJRixVQUFVQyxTQUFTLENBQUNDLFNBQVMsS0FBSyxJQUFJO1FBQzFFRixVQUFVQyxTQUFTLENBQUNDLFNBQVMsR0FBR0U7SUFDbEM7QUFDRixFQUFFO0FBQ0ssSUFBSUcsb0NBQW9DLFNBQVNBO0lBQ3REUCxVQUFVUSxRQUFRLEdBQUdULDhEQUFhQTtBQUNwQyxFQUFFO0FBQ0ssSUFBSVUsaUNBQWlDLFNBQVNBLCtCQUErQkMsU0FBUztJQUMzRlYsVUFBVVUsU0FBUyxHQUFHQTtBQUN4QixFQUFFO0FBQ0ssSUFBSUMsc0JBQXNCLFNBQVNBLG9CQUFvQkMsTUFBTTtJQUNsRSxJQUFJQyxtQkFBbUJiLFVBQVVRLFFBQVEsR0FBRyxNQUFNUixVQUFVUSxRQUFRLEdBQUc7SUFDdkUsSUFBSU0sY0FBY2QsVUFBVVUsU0FBUyxHQUFHLGdCQUFnQlYsVUFBVVUsU0FBUyxHQUFHO0lBQzlFLElBQUlSLFlBQVksS0FBS0YsVUFBVUMsU0FBUyxDQUFDQyxTQUFTLEdBQUdXLG1CQUFtQkM7SUFDeEUsT0FBT1o7QUFDVCxFQUFFO0FBRUYseUNBQXlDO0FBQ3pDLGlFQUFlRixTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL1VzZXJBZ2VudC5qcz9hYzQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFVzZXJBZ2VudCB9IGZyb20gJy4vUGxhdGZvcm0nO1xuaW1wb3J0IHsgQVVUSF9DQVRFR09SWSB9IGZyb20gJy4vUGxhdGZvcm0vY29uc3RhbnRzJztcblxuLy8gY29uc3RydWN0b3JcbmZ1bmN0aW9uIFVzZXJBZ2VudCgpIHt9XG4vLyBwdWJsaWNcblVzZXJBZ2VudC5wcm90b3R5cGUudXNlckFnZW50ID0gZ2V0VXNlckFnZW50KCk7XG5leHBvcnQgdmFyIGFwcGVuZFRvQ29nbml0b1VzZXJBZ2VudCA9IGZ1bmN0aW9uIGFwcGVuZFRvQ29nbml0b1VzZXJBZ2VudChjb250ZW50KSB7XG4gIGlmICghY29udGVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoVXNlckFnZW50LnByb3RvdHlwZS51c2VyQWdlbnQgJiYgIVVzZXJBZ2VudC5wcm90b3R5cGUudXNlckFnZW50LmluY2x1ZGVzKGNvbnRlbnQpKSB7XG4gICAgVXNlckFnZW50LnByb3RvdHlwZS51c2VyQWdlbnQgPSBVc2VyQWdlbnQucHJvdG90eXBlLnVzZXJBZ2VudC5jb25jYXQoJyAnLCBjb250ZW50KTtcbiAgfVxuICBpZiAoIVVzZXJBZ2VudC5wcm90b3R5cGUudXNlckFnZW50IHx8IFVzZXJBZ2VudC5wcm90b3R5cGUudXNlckFnZW50ID09PSAnJykge1xuICAgIFVzZXJBZ2VudC5wcm90b3R5cGUudXNlckFnZW50ID0gY29udGVudDtcbiAgfVxufTtcbmV4cG9ydCB2YXIgYWRkQXV0aENhdGVnb3J5VG9Db2duaXRvVXNlckFnZW50ID0gZnVuY3Rpb24gYWRkQXV0aENhdGVnb3J5VG9Db2duaXRvVXNlckFnZW50KCkge1xuICBVc2VyQWdlbnQuY2F0ZWdvcnkgPSBBVVRIX0NBVEVHT1JZO1xufTtcbmV4cG9ydCB2YXIgYWRkRnJhbWV3b3JrVG9Db2duaXRvVXNlckFnZW50ID0gZnVuY3Rpb24gYWRkRnJhbWV3b3JrVG9Db2duaXRvVXNlckFnZW50KGZyYW1ld29yaykge1xuICBVc2VyQWdlbnQuZnJhbWV3b3JrID0gZnJhbWV3b3JrO1xufTtcbmV4cG9ydCB2YXIgZ2V0QW1wbGlmeVVzZXJBZ2VudCA9IGZ1bmN0aW9uIGdldEFtcGxpZnlVc2VyQWdlbnQoYWN0aW9uKSB7XG4gIHZhciB1YUNhdGVnb3J5QWN0aW9uID0gVXNlckFnZW50LmNhdGVnb3J5ID8gXCIgXCIgKyBVc2VyQWdlbnQuY2F0ZWdvcnkgOiAnJztcbiAgdmFyIHVhRnJhbWV3b3JrID0gVXNlckFnZW50LmZyYW1ld29yayA/IFwiIGZyYW1ld29yay9cIiArIFVzZXJBZ2VudC5mcmFtZXdvcmsgOiAnJztcbiAgdmFyIHVzZXJBZ2VudCA9IFwiXCIgKyBVc2VyQWdlbnQucHJvdG90eXBlLnVzZXJBZ2VudCArIHVhQ2F0ZWdvcnlBY3Rpb24gKyB1YUZyYW1ld29yaztcbiAgcmV0dXJuIHVzZXJBZ2VudDtcbn07XG5cbi8vIGNsYXNzIGZvciBkZWZpbmluZyB0aGUgYW16biB1c2VyLWFnZW50XG5leHBvcnQgZGVmYXVsdCBVc2VyQWdlbnQ7Il0sIm5hbWVzIjpbImdldFVzZXJBZ2VudCIsIkFVVEhfQ0FURUdPUlkiLCJVc2VyQWdlbnQiLCJwcm90b3R5cGUiLCJ1c2VyQWdlbnQiLCJhcHBlbmRUb0NvZ25pdG9Vc2VyQWdlbnQiLCJjb250ZW50IiwiaW5jbHVkZXMiLCJjb25jYXQiLCJhZGRBdXRoQ2F0ZWdvcnlUb0NvZ25pdG9Vc2VyQWdlbnQiLCJjYXRlZ29yeSIsImFkZEZyYW1ld29ya1RvQ29nbml0b1VzZXJBZ2VudCIsImZyYW1ld29yayIsImdldEFtcGxpZnlVc2VyQWdlbnQiLCJhY3Rpb24iLCJ1YUNhdGVnb3J5QWN0aW9uIiwidWFGcmFtZXdvcmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/UserAgent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationDetails: () => (/* reexport safe */ _AuthenticationDetails__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   AuthenticationHelper: () => (/* reexport safe */ _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   CognitoAccessToken: () => (/* reexport safe */ _CognitoAccessToken__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   CognitoIdToken: () => (/* reexport safe */ _CognitoIdToken__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   CognitoRefreshToken: () => (/* reexport safe */ _CognitoRefreshToken__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   CognitoUser: () => (/* reexport safe */ _CognitoUser__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   CognitoUserAttribute: () => (/* reexport safe */ _CognitoUserAttribute__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   CognitoUserPool: () => (/* reexport safe */ _CognitoUserPool__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   CognitoUserSession: () => (/* reexport safe */ _CognitoUserSession__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   CookieStorage: () => (/* reexport safe */ _CookieStorage__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   DateHelper: () => (/* reexport safe */ _DateHelper__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   WordArray: () => (/* reexport safe */ _utils_WordArray__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   appendToCognitoUserAgent: () => (/* reexport safe */ _UserAgent__WEBPACK_IMPORTED_MODULE_11__.appendToCognitoUserAgent)\n/* harmony export */ });\n/* harmony import */ var _AuthenticationDetails__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthenticationDetails */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js\");\n/* harmony import */ var _AuthenticationHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthenticationHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js\");\n/* harmony import */ var _CognitoAccessToken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CognitoAccessToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js\");\n/* harmony import */ var _CognitoIdToken__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CognitoIdToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js\");\n/* harmony import */ var _CognitoRefreshToken__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CognitoRefreshToken */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js\");\n/* harmony import */ var _CognitoUser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CognitoUser */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUser.js\");\n/* harmony import */ var _CognitoUserAttribute__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CognitoUserAttribute */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js\");\n/* harmony import */ var _CognitoUserPool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./CognitoUserPool */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js\");\n/* harmony import */ var _CognitoUserSession__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CognitoUserSession */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js\");\n/* harmony import */ var _CookieStorage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CookieStorage */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/CookieStorage.js\");\n/* harmony import */ var _DateHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DateHelper */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/DateHelper.js\");\n/* harmony import */ var _UserAgent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./UserAgent */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/UserAgent.js\");\n/* harmony import */ var _utils_WordArray__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/WordArray */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js\");\n/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FFMEU7QUFDRjtBQUNKO0FBQ1I7QUFDVTtBQUNoQjtBQUNrQjtBQUNWO0FBQ007QUFDVjtBQUNOO0FBQ0U7QUFDRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy9pbmRleC5qcz8yMjIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgQXV0aGVudGljYXRpb25EZXRhaWxzIH0gZnJvbSAnLi9BdXRoZW50aWNhdGlvbkRldGFpbHMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBBdXRoZW50aWNhdGlvbkhlbHBlciB9IGZyb20gJy4vQXV0aGVudGljYXRpb25IZWxwZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb2duaXRvQWNjZXNzVG9rZW4gfSBmcm9tICcuL0NvZ25pdG9BY2Nlc3NUb2tlbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvZ25pdG9JZFRva2VuIH0gZnJvbSAnLi9Db2duaXRvSWRUb2tlbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvZ25pdG9SZWZyZXNoVG9rZW4gfSBmcm9tICcuL0NvZ25pdG9SZWZyZXNoVG9rZW4nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb2duaXRvVXNlciB9IGZyb20gJy4vQ29nbml0b1VzZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb2duaXRvVXNlckF0dHJpYnV0ZSB9IGZyb20gJy4vQ29nbml0b1VzZXJBdHRyaWJ1dGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBDb2duaXRvVXNlclBvb2wgfSBmcm9tICcuL0NvZ25pdG9Vc2VyUG9vbCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIENvZ25pdG9Vc2VyU2Vzc2lvbiB9IGZyb20gJy4vQ29nbml0b1VzZXJTZXNzaW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQ29va2llU3RvcmFnZSB9IGZyb20gJy4vQ29va2llU3RvcmFnZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERhdGVIZWxwZXIgfSBmcm9tICcuL0RhdGVIZWxwZXInO1xuZXhwb3J0IHsgYXBwZW5kVG9Db2duaXRvVXNlckFnZW50IH0gZnJvbSAnLi9Vc2VyQWdlbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBXb3JkQXJyYXkgfSBmcm9tICcuL3V0aWxzL1dvcmRBcnJheSc7Il0sIm5hbWVzIjpbImRlZmF1bHQiLCJBdXRoZW50aWNhdGlvbkRldGFpbHMiLCJBdXRoZW50aWNhdGlvbkhlbHBlciIsIkNvZ25pdG9BY2Nlc3NUb2tlbiIsIkNvZ25pdG9JZFRva2VuIiwiQ29nbml0b1JlZnJlc2hUb2tlbiIsIkNvZ25pdG9Vc2VyIiwiQ29nbml0b1VzZXJBdHRyaWJ1dGUiLCJDb2duaXRvVXNlclBvb2wiLCJDb2duaXRvVXNlclNlc3Npb24iLCJDb29raWVTdG9yYWdlIiwiRGF0ZUhlbHBlciIsImFwcGVuZFRvQ29nbml0b1VzZXJBZ2VudCIsIldvcmRBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js":
/*!***********************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WordArray)\n/* harmony export */ });\n/* harmony import */ var _cryptoSecureRandomInt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cryptoSecureRandomInt */ \"(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js\");\n\n/**\n * Hex encoding strategy.\n * Converts a word array to a hex string.\n * @param {WordArray} wordArray The word array.\n * @return {string} The hex string.\n * @static\n */ function hexStringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words;\n    var sigBytes = wordArray.sigBytes;\n    // Convert\n    var hexChars = [];\n    for(var i = 0; i < sigBytes; i++){\n        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        hexChars.push((bite >>> 4).toString(16));\n        hexChars.push((bite & 0x0f).toString(16));\n    }\n    return hexChars.join(\"\");\n}\nvar WordArray = /*#__PURE__*/ function() {\n    function WordArray(words, sigBytes) {\n        words = this.words = words || [];\n        if (sigBytes != undefined) {\n            this.sigBytes = sigBytes;\n        } else {\n            this.sigBytes = words.length * 4;\n        }\n    }\n    var _proto = WordArray.prototype;\n    _proto.random = function random(nBytes) {\n        var words = [];\n        for(var i = 0; i < nBytes; i += 4){\n            words.push((0,_cryptoSecureRandomInt__WEBPACK_IMPORTED_MODULE_0__[\"default\"])());\n        }\n        return new WordArray(words, nBytes);\n    };\n    _proto.toString = function toString() {\n        return hexStringify(this);\n    };\n    return WordArray;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvdXRpbHMvV29yZEFycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTREO0FBRTVEOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLGFBQWFDLFNBQVM7SUFDN0IsWUFBWTtJQUNaLElBQUlDLFFBQVFELFVBQVVDLEtBQUs7SUFDM0IsSUFBSUMsV0FBV0YsVUFBVUUsUUFBUTtJQUVqQyxVQUFVO0lBQ1YsSUFBSUMsV0FBVyxFQUFFO0lBQ2pCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRixVQUFVRSxJQUFLO1FBQ2pDLElBQUlDLE9BQU9KLEtBQUssQ0FBQ0csTUFBTSxFQUFFLEtBQUssS0FBS0EsSUFBSSxJQUFJLElBQUk7UUFDL0NELFNBQVNHLElBQUksQ0FBQyxDQUFDRCxTQUFTLEdBQUdFLFFBQVEsQ0FBQztRQUNwQ0osU0FBU0csSUFBSSxDQUFDLENBQUNELE9BQU8sSUFBRyxFQUFHRSxRQUFRLENBQUM7SUFDdkM7SUFDQSxPQUFPSixTQUFTSyxJQUFJLENBQUM7QUFDdkI7QUFDQSxJQUFJQyxZQUFZLFdBQVcsR0FBRTtJQUMzQixTQUFTQSxVQUFVUixLQUFLLEVBQUVDLFFBQVE7UUFDaENELFFBQVEsSUFBSSxDQUFDQSxLQUFLLEdBQUdBLFNBQVMsRUFBRTtRQUNoQyxJQUFJQyxZQUFZUSxXQUFXO1lBQ3pCLElBQUksQ0FBQ1IsUUFBUSxHQUFHQTtRQUNsQixPQUFPO1lBQ0wsSUFBSSxDQUFDQSxRQUFRLEdBQUdELE1BQU1VLE1BQU0sR0FBRztRQUNqQztJQUNGO0lBQ0EsSUFBSUMsU0FBU0gsVUFBVUksU0FBUztJQUNoQ0QsT0FBT0UsTUFBTSxHQUFHLFNBQVNBLE9BQU9DLE1BQU07UUFDcEMsSUFBSWQsUUFBUSxFQUFFO1FBQ2QsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlXLFFBQVFYLEtBQUssRUFBRztZQUNsQ0gsTUFBTUssSUFBSSxDQUFDUixrRUFBcUJBO1FBQ2xDO1FBQ0EsT0FBTyxJQUFJVyxVQUFVUixPQUFPYztJQUM5QjtJQUNBSCxPQUFPTCxRQUFRLEdBQUcsU0FBU0E7UUFDekIsT0FBT1IsYUFBYSxJQUFJO0lBQzFCO0lBQ0EsT0FBT1U7QUFDVDtBQUNnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Z1enp5LW9jdG8tYnJvY2NvbGktbmV4dC8uL25vZGVfbW9kdWxlcy9hbWF6b24tY29nbml0by1pZGVudGl0eS1qcy9lcy91dGlscy9Xb3JkQXJyYXkuanM/OGNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvU2VjdXJlUmFuZG9tSW50IGZyb20gJy4vY3J5cHRvU2VjdXJlUmFuZG9tSW50JztcblxuLyoqXG4gKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuXG4gKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBoZXggc3RyaW5nLlxuICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleCBzdHJpbmcuXG4gKiBAc3RhdGljXG4gKi9cbmZ1bmN0aW9uIGhleFN0cmluZ2lmeSh3b3JkQXJyYXkpIHtcbiAgLy8gU2hvcnRjdXRzXG4gIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3JkcztcbiAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG4gIC8vIENvbnZlcnRcbiAgdmFyIGhleENoYXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuICAgIHZhciBiaXRlID0gd29yZHNbaSA+Pj4gMl0gPj4+IDI0IC0gaSAlIDQgKiA4ICYgMHhmZjtcbiAgICBoZXhDaGFycy5wdXNoKChiaXRlID4+PiA0KS50b1N0cmluZygxNikpO1xuICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcbn1cbnZhciBXb3JkQXJyYXkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBXb3JkQXJyYXkod29yZHMsIHNpZ0J5dGVzKSB7XG4gICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107XG4gICAgaWYgKHNpZ0J5dGVzICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcbiAgICB9XG4gIH1cbiAgdmFyIF9wcm90byA9IFdvcmRBcnJheS5wcm90b3R5cGU7XG4gIF9wcm90by5yYW5kb20gPSBmdW5jdGlvbiByYW5kb20obkJ5dGVzKSB7XG4gICAgdmFyIHdvcmRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQnl0ZXM7IGkgKz0gNCkge1xuICAgICAgd29yZHMucHVzaChjcnlwdG9TZWN1cmVSYW5kb21JbnQoKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgV29yZEFycmF5KHdvcmRzLCBuQnl0ZXMpO1xuICB9O1xuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gaGV4U3RyaW5naWZ5KHRoaXMpO1xuICB9O1xuICByZXR1cm4gV29yZEFycmF5O1xufSgpO1xuZXhwb3J0IHsgV29yZEFycmF5IGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiY3J5cHRvU2VjdXJlUmFuZG9tSW50IiwiaGV4U3RyaW5naWZ5Iiwid29yZEFycmF5Iiwid29yZHMiLCJzaWdCeXRlcyIsImhleENoYXJzIiwiaSIsImJpdGUiLCJwdXNoIiwidG9TdHJpbmciLCJqb2luIiwiV29yZEFycmF5IiwidW5kZWZpbmVkIiwibGVuZ3RoIiwiX3Byb3RvIiwicHJvdG90eXBlIiwicmFuZG9tIiwibkJ5dGVzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/WordArray.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cryptoSecureRandomInt)\n/* harmony export */ });\nvar crypto;\n// Native crypto from window (Browser)\nif (false) {}\n// Native (experimental IE 11) crypto from window (Browser)\nif (!crypto && \"undefined\" !== \"undefined\" && 0) {}\n// Native crypto from global (NodeJS)\nif (!crypto && typeof global !== \"undefined\" && global.crypto) {\n    crypto = global.crypto;\n}\n// Native crypto import via require (NodeJS)\nif (!crypto && \"function\" === \"function\") {\n    try {\n        crypto = __webpack_require__(/*! crypto */ \"crypto\");\n    } catch (err) {}\n}\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */ function cryptoSecureRandomInt() {\n    if (crypto) {\n        // Use getRandomValues method (Browser)\n        if (typeof crypto.getRandomValues === \"function\") {\n            try {\n                return crypto.getRandomValues(new Uint32Array(1))[0];\n            } catch (err) {}\n        }\n        // Use randomBytes method (NodeJS)\n        if (typeof crypto.randomBytes === \"function\") {\n            try {\n                return crypto.randomBytes(4).readInt32LE();\n            } catch (err) {}\n        }\n    }\n    throw new Error(\"Native crypto module could not be used to get secure random number.\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYW1hem9uLWNvZ25pdG8taWRlbnRpdHktanMvZXMvdXRpbHMvY3J5cHRvU2VjdXJlUmFuZG9tSW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQTtBQUVKLHNDQUFzQztBQUN0QyxJQUFJLEtBQThDLEVBQUUsRUFFbkQ7QUFFRCwyREFBMkQ7QUFDM0QsSUFBSSxDQUFDQSxVQUFVLGdCQUFrQixlQUFlQyxDQUFlLEVBQUUsRUFFaEU7QUFFRCxxQ0FBcUM7QUFDckMsSUFBSSxDQUFDRCxVQUFVLE9BQU9HLFdBQVcsZUFBZUEsT0FBT0gsTUFBTSxFQUFFO0lBQzdEQSxTQUFTRyxPQUFPSCxNQUFNO0FBQ3hCO0FBRUEsNENBQTRDO0FBQzVDLElBQUksQ0FBQ0EsVUFBVSxVQUFjSSxLQUFLLFlBQVk7SUFDNUMsSUFBSTtRQUNGSixTQUFTSSxtQkFBT0EsQ0FBQztJQUNuQixFQUFFLE9BQU9DLEtBQUssQ0FBQztBQUNqQjtBQUVBOzs7Q0FHQyxHQUNjLFNBQVNDO0lBQ3RCLElBQUlOLFFBQVE7UUFDVix1Q0FBdUM7UUFDdkMsSUFBSSxPQUFPQSxPQUFPTyxlQUFlLEtBQUssWUFBWTtZQUNoRCxJQUFJO2dCQUNGLE9BQU9QLE9BQU9PLGVBQWUsQ0FBQyxJQUFJQyxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBQ3RELEVBQUUsT0FBT0gsS0FBSyxDQUFDO1FBQ2pCO1FBRUEsa0NBQWtDO1FBQ2xDLElBQUksT0FBT0wsT0FBT1MsV0FBVyxLQUFLLFlBQVk7WUFDNUMsSUFBSTtnQkFDRixPQUFPVCxPQUFPUyxXQUFXLENBQUMsR0FBR0MsV0FBVztZQUMxQyxFQUFFLE9BQU9MLEtBQUssQ0FBQztRQUNqQjtJQUNGO0lBQ0EsTUFBTSxJQUFJTSxNQUFNO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnV6enktb2N0by1icm9jY29saS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2FtYXpvbi1jb2duaXRvLWlkZW50aXR5LWpzL2VzL3V0aWxzL2NyeXB0b1NlY3VyZVJhbmRvbUludC5qcz9hYWZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjcnlwdG87XG5cbi8vIE5hdGl2ZSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNyeXB0bykge1xuICBjcnlwdG8gPSB3aW5kb3cuY3J5cHRvO1xufVxuXG4vLyBOYXRpdmUgKGV4cGVyaW1lbnRhbCBJRSAxMSkgY3J5cHRvIGZyb20gd2luZG93IChCcm93c2VyKVxuaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm1zQ3J5cHRvKSB7XG4gIGNyeXB0byA9IHdpbmRvdy5tc0NyeXB0bztcbn1cblxuLy8gTmF0aXZlIGNyeXB0byBmcm9tIGdsb2JhbCAoTm9kZUpTKVxuaWYgKCFjcnlwdG8gJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmNyeXB0bykge1xuICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xufVxuXG4vLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgdHJ5IHtcbiAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxufVxuXG4vKlxuICogQ3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHBzZXVkb3JhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXG4gKiBBcyBNYXRoLnJhbmRvbSgpIGlzIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBzYWZlIHRvIHVzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcnlwdG9TZWN1cmVSYW5kb21JbnQoKSB7XG4gIGlmIChjcnlwdG8pIHtcbiAgICAvLyBVc2UgZ2V0UmFuZG9tVmFsdWVzIG1ldGhvZCAoQnJvd3NlcilcbiAgICBpZiAodHlwZW9mIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuXG4gICAgLy8gVXNlIHJhbmRvbUJ5dGVzIG1ldGhvZCAoTm9kZUpTKVxuICAgIGlmICh0eXBlb2YgY3J5cHRvLnJhbmRvbUJ5dGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignTmF0aXZlIGNyeXB0byBtb2R1bGUgY291bGQgbm90IGJlIHVzZWQgdG8gZ2V0IHNlY3VyZSByYW5kb20gbnVtYmVyLicpO1xufSJdLCJuYW1lcyI6WyJjcnlwdG8iLCJ3aW5kb3ciLCJtc0NyeXB0byIsImdsb2JhbCIsInJlcXVpcmUiLCJlcnIiLCJjcnlwdG9TZWN1cmVSYW5kb21JbnQiLCJnZXRSYW5kb21WYWx1ZXMiLCJVaW50MzJBcnJheSIsInJhbmRvbUJ5dGVzIiwicmVhZEludDMyTEUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js\n");

/***/ })

};
;